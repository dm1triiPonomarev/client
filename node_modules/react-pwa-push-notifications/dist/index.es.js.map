{"version":3,"file":"index.es.js","sources":["../src/hooks/useSubscribe.ts"],"sourcesContent":["const urlBase64ToUint8Array = (base64String: string): Uint8Array => {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n        .replace(/-/g, '+')\n        .replace(/_/g, '/');\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n\n    return outputArray;\n};\n\nexport enum Errors {\n    ServiceWorkerAndPushManagerNotSupported = \"ServiceWorkerAndPushManagerNotSupported\",\n    PushManagerUnavailable = \"PushManagerUnavailable\",\n    ExistingSubscription = \"ExistingSubscription\",\n    Unknown = \"Unknown\"\n}\n\ninterface SubscribeProps {\n    publicKey: string;\n}\n\ninterface ErrorObject {\n    errorCode: Errors;\n}\n\nexport const useSubscribe = ({ publicKey }: SubscribeProps) => {\n    const getSubscription = async (): Promise<PushSubscription> => {\n        if (!('serviceWorker' in navigator) || !('PushManager' in window)) {\n            throw { errorCode: Errors.ServiceWorkerAndPushManagerNotSupported } as ErrorObject;\n        }\n\n        const registration = await navigator.serviceWorker.ready;\n\n        if (!registration.pushManager) {\n            throw { errorCode: Errors.PushManagerUnavailable } as ErrorObject;\n        }\n\n        const existingSubscription = await registration.pushManager.getSubscription();\n\n        if (existingSubscription) {\n            throw { errorCode: Errors.ExistingSubscription } as ErrorObject;\n        }\n\n        const convertedVapidKey = urlBase64ToUint8Array(publicKey);\n        return await registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true,\n        });\n    };\n\n    return {getSubscription};\n};\n"],"names":["urlBase64ToUint8Array","base64String","padding","base64","rawData","outputArray","useSubscribe","publicKey","registration","convertedVapidKey"],"mappings":"AAAA,MAAMA,IAAwB,CAACC,MAAqC;AAChE,QAAMC,IAAU,IAAI,QAAQ,IAAID,EAAa,SAAS,KAAK,CAAC,GACtDE,KAAUF,IAAeC,GAC1B,QAAQ,MAAM,GAAG,EACjB,QAAQ,MAAM,GAAG,GAEhBE,IAAU,OAAO,KAAKD,CAAM,GAC5BE,IAAc,IAAI,WAAWD,EAAQ,MAAM;AAEjD,WAAS,IAAI,GAAG,IAAIA,EAAQ,QAAQ,EAAE;AACtB,IAAAC,EAAA,KAAKD,EAAQ,WAAW,CAAC;AAGlC,SAAAC;AACX,GAiBaC,IAAe,CAAC,EAAE,WAAAC,SAyBpB,EAAC,iBAxBgB,YAAuC;AAC3D,MAAI,EAAE,mBAAmB,cAAc,EAAE,iBAAiB;AAChD,UAAA,EAAE,WAAW;AAGjB,QAAAC,IAAe,MAAM,UAAU,cAAc;AAE/C,MAAA,CAACA,EAAa;AACR,UAAA,EAAE,WAAW;AAKvB,MAF6B,MAAMA,EAAa,YAAY,gBAAgB;AAGlE,UAAA,EAAE,WAAW;AAGjB,QAAAC,IAAoBT,EAAsBO,CAAS;AAClD,SAAA,MAAMC,EAAa,YAAY,UAAU;AAAA,IAC5C,sBAAsBC;AAAA,IACtB,iBAAiB;AAAA,EAAA,CACpB;AAAA,EAGkB;"}