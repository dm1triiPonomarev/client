{"ast":null,"code":"class t {\n  constructor(t) {\n    this.mode = 4, this.data = void 0, this.parsedData = [], this.data = t;\n    let e = 0;\n    const s = this.data.length;\n    for (; e < s; e++) {\n      const t = this.data.charCodeAt(e);\n      let s;\n      s = t > 65536 ? [240 | (1835008 & t) >>> 18, 128 | (258048 & t) >>> 12, 128 | (4032 & t) >>> 6, 128 | 63 & t] : t > 2048 ? [224 | (61440 & t) >>> 12, 128 | (4032 & t) >>> 6, 128 | 63 & t] : t > 128 ? [192 | (1984 & t) >>> 6, 128 | 63 & t] : [t], this.parsedData.push(s);\n    }\n    this.parsedData = Array.prototype.concat.apply([], this.parsedData), this.parsedData.length !== this.data.length && (this.parsedData.unshift(191), this.parsedData.unshift(187), this.parsedData.unshift(239));\n  }\n  getLength() {\n    return this.parsedData.length;\n  }\n  write(t) {\n    let e = 0;\n    const s = this.parsedData.length;\n    for (; e < s; e++) t.put(this.parsedData[e], 8);\n  }\n}\nconst e = {\n  L: 1,\n  M: 0,\n  Q: 3,\n  H: 2\n};\nclass s {\n  constructor(t, e) {\n    this.totalCount = void 0, this.dataCount = void 0, this.totalCount = t, this.dataCount = e;\n  }\n  static getRSBlocks(t, e) {\n    const r = s.getRsBlockTable(t, e);\n    if (void 0 === r) throw new Error(\"bad rs block @ typeNumber:\" + t + \"/errorCorrectLevel:\" + e);\n    const o = r.length / 3,\n      n = [];\n    for (let t = 0; t < o; t++) {\n      const e = r[3 * t],\n        o = r[3 * t + 1],\n        i = r[3 * t + 2];\n      for (let t = 0; t < e; t++) n.push(new s(o, i));\n    }\n    return n;\n  }\n  static getRsBlockTable(t, r) {\n    switch (r) {\n      case e.L:\n        return s.RS_BLOCK_TABLE[4 * (t - 1)];\n      case e.M:\n        return s.RS_BLOCK_TABLE[4 * (t - 1) + 1];\n      case e.Q:\n        return s.RS_BLOCK_TABLE[4 * (t - 1) + 2];\n      case e.H:\n        return s.RS_BLOCK_TABLE[4 * (t - 1) + 3];\n      default:\n        return;\n    }\n  }\n}\ns.RS_BLOCK_TABLE = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\nclass r {\n  constructor() {\n    this.buffer = [], this.length = 0;\n  }\n  get(t) {\n    const e = Math.floor(t / 8);\n    return 1 == (this.buffer[e] >>> 7 - t % 8 & 1);\n  }\n  put(t, e) {\n    for (let s = 0; s < e; s++) this.putBit(1 == (t >>> e - s - 1 & 1));\n  }\n  getLengthInBits() {\n    return this.length;\n  }\n  putBit(t) {\n    const e = Math.floor(this.length / 8);\n    this.buffer.length <= e && this.buffer.push(0), t && (this.buffer[e] |= 128 >>> this.length % 8), this.length++;\n  }\n}\nconst [o, n] = (() => {\n    const t = new Array(256),\n      e = new Array(256);\n    for (let e = 0; e < 8; e++) t[e] = 1 << e;\n    for (let e = 8; e < 256; e++) t[e] = t[e - 4] ^ t[e - 5] ^ t[e - 6] ^ t[e - 8];\n    for (let s = 0; s < 255; s++) e[t[s]] = s;\n    return [t, e];\n  })(),\n  i = t => {\n    if (t < 1) throw new Error(\"glog(\" + t + \")\");\n    return n[t];\n  },\n  h = t => {\n    for (; t < 0;) t += 255;\n    for (; t >= 256;) t -= 255;\n    return o[t];\n  };\nclass l {\n  constructor(t, e) {\n    if (this.num = void 0, void 0 === t.length) throw new Error(t.length + \"/\" + e);\n    let s = 0;\n    for (; s < t.length && 0 === t[s];) s++;\n    this.num = new Array(t.length - s + e);\n    for (let e = 0; e < t.length - s; e++) this.num[e] = t[e + s];\n  }\n  get(t) {\n    return this.num[t];\n  }\n  getLength() {\n    return this.num.length;\n  }\n  multiply(t) {\n    const e = new Array(this.getLength() + t.getLength() - 1);\n    for (let s = 0; s < this.getLength(); s++) for (let r = 0; r < t.getLength(); r++) e[s + r] ^= h(i(this.get(s)) + i(t.get(r)));\n    return new l(e, 0);\n  }\n  mod(t) {\n    if (this.getLength() - t.getLength() < 0) return this;\n    const e = i(this.get(0)) - i(t.get(0)),\n      s = new Array(this.getLength());\n    for (let t = 0; t < this.getLength(); t++) s[t] = this.get(t);\n    for (let r = 0; r < t.getLength(); r++) s[r] ^= h(i(t.get(r)) + e);\n    return new l(s, 0).mod(t);\n  }\n}\nconst a = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],\n  c = t => {\n    let e = 0;\n    for (; 0 !== t;) e++, t >>>= 1;\n    return e;\n  },\n  u = (t, e, s) => {\n    switch (t) {\n      case 0:\n        return (e + s) % 2 == 0;\n      case 1:\n        return e % 2 == 0;\n      case 2:\n        return s % 3 == 0;\n      case 3:\n        return (e + s) % 3 == 0;\n      case 4:\n        return (Math.floor(e / 2) + Math.floor(s / 3)) % 2 == 0;\n      case 5:\n        return e * s % 2 + e * s % 3 == 0;\n      case 6:\n        return (e * s % 2 + e * s % 3) % 2 == 0;\n      case 7:\n        return (e * s % 3 + (e + s) % 2) % 2 == 0;\n      default:\n        throw new Error(\"bad maskPattern:\" + t);\n    }\n  },\n  d = t => {\n    let e = new l([1], 0);\n    for (let s = 0; s < t; s++) e = e.multiply(new l([1, h(s)], 0));\n    return e;\n  },\n  p = (t, e) => {\n    if (1 <= e && e < 10) switch (t) {\n      case 1:\n        return 10;\n      case 2:\n        return 9;\n      case 4:\n      case 8:\n        return 8;\n      default:\n        throw new Error(\"mode:\" + t);\n    } else if (e < 27) switch (t) {\n      case 1:\n        return 12;\n      case 2:\n        return 11;\n      case 4:\n        return 16;\n      case 8:\n        return 10;\n      default:\n        throw new Error(\"mode:\" + t);\n    } else {\n      if (!(e < 41)) throw new Error(\"type:\" + e);\n      switch (t) {\n        case 1:\n          return 14;\n        case 2:\n          return 13;\n        case 4:\n          return 16;\n        case 8:\n          return 12;\n        default:\n          throw new Error(\"mode:\" + t);\n      }\n    }\n  },\n  f = t => {\n    const e = t.getModuleCount();\n    let s = 0;\n    for (let r = 0; r < e; r++) for (let o = 0; o < e; o++) {\n      let n = 0;\n      const i = t.isDark(r, o);\n      for (let s = -1; s <= 1; s++) if (!(r + s < 0 || e <= r + s)) for (let h = -1; h <= 1; h++) o + h < 0 || e <= o + h || 0 === s && 0 === h || i === t.isDark(r + s, o + h) && n++;\n      n > 5 && (s += 3 + n - 5);\n    }\n    for (let r = 0; r < e - 1; r++) for (let o = 0; o < e - 1; o++) {\n      let e = 0;\n      t.isDark(r, o) && e++, t.isDark(r + 1, o) && e++, t.isDark(r, o + 1) && e++, t.isDark(r + 1, o + 1) && e++, 0 !== e && 4 !== e || (s += 3);\n    }\n    for (let r = 0; r < e; r++) for (let o = 0; o < e - 6; o++) t.isDark(r, o) && !t.isDark(r, o + 1) && t.isDark(r, o + 2) && t.isDark(r, o + 3) && t.isDark(r, o + 4) && !t.isDark(r, o + 5) && t.isDark(r, o + 6) && (s += 40);\n    for (let r = 0; r < e; r++) for (let o = 0; o < e - 6; o++) t.isDark(o, r) && !t.isDark(o + 1, r) && t.isDark(o + 2, r) && t.isDark(o + 3, r) && t.isDark(o + 4, r) && !t.isDark(o + 5, r) && t.isDark(o + 6, r) && (s += 40);\n    let r = 0;\n    for (let s = 0; s < e; s++) for (let o = 0; o < e; o++) t.isDark(o, s) && r++;\n    return s += Math.abs(100 * r / e / e - 50) / 5 * 10, s;\n  };\nclass g {\n  constructor(t, e) {\n    this.typeNumber = void 0, this.errorCorrectLevel = void 0, this.modules = [], this.moduleCount = 0, this.dataCache = null, this.dataList = [], this.typeNumber = t, this.errorCorrectLevel = e;\n  }\n  addData(e) {\n    const s = new t(e);\n    this.dataList.push(s), this.dataCache = null;\n  }\n  isDark(t, e) {\n    if (t < 0 || this.moduleCount <= t || e < 0 || this.moduleCount <= e) throw new Error(t + \",\" + e);\n    return this.modules[t][e];\n  }\n  getModuleCount() {\n    return this.moduleCount;\n  }\n  make() {\n    this.makeImpl(!1, this.getBestMaskPattern());\n  }\n  makeImpl(t, e) {\n    this.moduleCount = 4 * this.typeNumber + 17, this.modules = new Array(this.moduleCount);\n    for (let t = 0; t < this.moduleCount; t++) {\n      this.modules[t] = new Array(this.moduleCount);\n      for (let e = 0; e < this.moduleCount; e++) this.modules[t][e] = null;\n    }\n    this.setupPositionProbePattern(0, 0), this.setupPositionProbePattern(this.moduleCount - 7, 0), this.setupPositionProbePattern(0, this.moduleCount - 7), this.setupPositionAdjustPattern(), this.setupTimingPattern(), this.setupTypeInfo(t, e), this.typeNumber >= 7 && this.setupTypeNumber(t), null == this.dataCache && (this.dataCache = this.createData(this.typeNumber, this.errorCorrectLevel, this.dataList)), this.mapData(this.dataCache, e);\n  }\n  setupPositionProbePattern(t, e) {\n    for (let s = -1; s <= 7; s++) if (!(t + s <= -1 || this.moduleCount <= t + s)) for (let r = -1; r <= 7; r++) e + r <= -1 || this.moduleCount <= e + r || (this.modules[t + s][e + r] = 0 <= s && s <= 6 && (0 === r || 6 === r) || 0 <= r && r <= 6 && (0 === s || 6 === s) || 2 <= s && s <= 4 && 2 <= r && r <= 4);\n  }\n  getBestMaskPattern() {\n    let t = 0,\n      e = 0;\n    for (let s = 0; s < 8; s++) {\n      this.makeImpl(!0, s);\n      const r = f(this);\n      (0 === s || t > r) && (t = r, e = s);\n    }\n    return e;\n  }\n  createMovieClip(t, e, s) {\n    const r = t.createEmptyMovieClip(e, s);\n    this.make();\n    for (let t = 0; t < this.modules.length; t++) {\n      const e = 1 * t;\n      for (let s = 0; s < this.modules[t].length; s++) {\n        const o = 1 * s;\n        this.modules[t][s] && (r.beginFill(0, 100), r.moveTo(o, e), r.lineTo(o + 1, e), r.lineTo(o + 1, e + 1), r.lineTo(o, e + 1), r.endFill());\n      }\n    }\n    return r;\n  }\n  setupTimingPattern() {\n    for (let t = 8; t < this.moduleCount - 8; t++) null == this.modules[t][6] && (this.modules[t][6] = t % 2 == 0);\n    for (let t = 8; t < this.moduleCount - 8; t++) null == this.modules[6][t] && (this.modules[6][t] = t % 2 == 0);\n  }\n  setupPositionAdjustPattern() {\n    const t = a[this.typeNumber - 1];\n    for (let e = 0; e < t.length; e++) for (let s = 0; s < t.length; s++) {\n      const r = t[e],\n        o = t[s];\n      if (null == this.modules[r][o]) for (let t = -2; t <= 2; t++) for (let e = -2; e <= 2; e++) this.modules[r + t][o + e] = -2 === t || 2 === t || -2 === e || 2 === e || 0 === t && 0 === e;\n    }\n  }\n  setupTypeNumber(t) {\n    const e = (t => {\n      let e = t << 12;\n      for (; c(e) - c(7973) >= 0;) e ^= 7973 << c(e) - c(7973);\n      return t << 12 | e;\n    })(this.typeNumber);\n    for (let s = 0; s < 18; s++) this.modules[Math.floor(s / 3)][s % 3 + this.moduleCount - 8 - 3] = !t && 1 == (e >> s & 1);\n    for (let s = 0; s < 18; s++) this.modules[s % 3 + this.moduleCount - 8 - 3][Math.floor(s / 3)] = !t && 1 == (e >> s & 1);\n  }\n  setupTypeInfo(t, e) {\n    const s = (t => {\n      let e = t << 10;\n      for (; c(e) - c(1335) >= 0;) e ^= 1335 << c(e) - c(1335);\n      return 21522 ^ (t << 10 | e);\n    })(this.errorCorrectLevel << 3 | e);\n    for (let e = 0; e < 15; e++) {\n      const r = !t && 1 == (s >> e & 1);\n      e < 6 ? this.modules[e][8] = r : e < 8 ? this.modules[e + 1][8] = r : this.modules[this.moduleCount - 15 + e][8] = r;\n    }\n    for (let e = 0; e < 15; e++) {\n      const r = !t && 1 == (s >> e & 1);\n      e < 8 ? this.modules[8][this.moduleCount - e - 1] = r : e < 9 ? this.modules[8][15 - e - 1 + 1] = r : this.modules[8][15 - e - 1] = r;\n    }\n    this.modules[this.moduleCount - 8][8] = !t;\n  }\n  mapData(t, e) {\n    let s = -1,\n      r = this.moduleCount - 1,\n      o = 7,\n      n = 0;\n    for (let i = this.moduleCount - 1; i > 0; i -= 2) for (6 === i && i--;;) {\n      for (let s = 0; s < 2; s++) if (null == this.modules[r][i - s]) {\n        let h = !1;\n        n < t.length && (h = 1 == (t[n] >>> o & 1)), u(e, r, i - s) && (h = !h), this.modules[r][i - s] = h, o--, -1 === o && (n++, o = 7);\n      }\n      if (r += s, r < 0 || this.moduleCount <= r) {\n        r -= s, s = -s;\n        break;\n      }\n    }\n  }\n  createData(t, e, o) {\n    const n = s.getRSBlocks(t, e),\n      i = new r();\n    for (let e = 0; e < o.length; e++) {\n      const s = o[e];\n      i.put(s.mode, 4), i.put(s.getLength(), p(s.mode, t)), s.write(i);\n    }\n    let h = 0;\n    for (let t = 0; t < n.length; t++) h += n[t].dataCount;\n    if (i.getLengthInBits() > 8 * h) throw new Error(\"code length overflow. (\" + i.getLengthInBits() + \">\" + 8 * h + \")\");\n    for (i.getLengthInBits() + 4 <= 8 * h && i.put(0, 4); i.getLengthInBits() % 8 != 0;) i.putBit(!1);\n    for (; !(i.getLengthInBits() >= 8 * h || (i.put(236, 8), i.getLengthInBits() >= 8 * h));) i.put(17, 8);\n    return this.createBytes(i, n);\n  }\n  createBytes(t, e) {\n    let s = 0,\n      r = 0,\n      o = 0;\n    const n = new Array(e.length),\n      i = new Array(e.length);\n    for (let h = 0; h < e.length; h++) {\n      const a = e[h].dataCount,\n        c = e[h].totalCount - a;\n      r = Math.max(r, a), o = Math.max(o, c), n[h] = new Array(a);\n      for (let e = 0; e < n[h].length; e++) n[h][e] = 255 & t.buffer[e + s];\n      s += a;\n      const u = d(c),\n        p = new l(n[h], u.getLength() - 1).mod(u);\n      i[h] = new Array(u.getLength() - 1);\n      for (let t = 0; t < i[h].length; t++) {\n        const e = t + p.getLength() - i[h].length;\n        i[h][t] = e >= 0 ? p.get(e) : 0;\n      }\n    }\n    let h = 0;\n    for (let t = 0; t < e.length; t++) h += e[t].totalCount;\n    const a = new Array(h);\n    let c = 0;\n    for (let t = 0; t < r; t++) for (let s = 0; s < e.length; s++) t < n[s].length && (a[c++] = n[s][t]);\n    for (let t = 0; t < o; t++) for (let s = 0; s < e.length; s++) t < i[s].length && (a[c++] = i[s][t]);\n    return a;\n  }\n}\nconst m = [[17, 14, 11, 7], [32, 26, 20, 14], [53, 42, 32, 24], [78, 62, 46, 34], [106, 84, 60, 44], [134, 106, 74, 58], [154, 122, 86, 64], [192, 152, 108, 84], [230, 180, 130, 98], [271, 213, 151, 119], [321, 251, 177, 137], [367, 287, 203, 155], [425, 331, 241, 177], [458, 362, 258, 194], [520, 412, 292, 220], [586, 450, 322, 250], [644, 504, 364, 280], [718, 560, 394, 310], [792, 624, 442, 338], [858, 666, 482, 382], [929, 711, 509, 403], [1003, 779, 565, 439], [1091, 857, 611, 461], [1171, 911, 661, 511], [1273, 997, 715, 535], [1367, 1059, 751, 593], [1465, 1125, 805, 625], [1528, 1190, 868, 658], [1628, 1264, 908, 698], [1732, 1370, 982, 742], [1840, 1452, 1030, 790], [1952, 1538, 1112, 842], [2068, 1628, 1168, 898], [2188, 1722, 1228, 958], [2303, 1809, 1283, 983], [2431, 1911, 1351, 1051], [2563, 1989, 1423, 1093], [2699, 2099, 1499, 1139], [2809, 2213, 1579, 1219], [2953, 2331, 1663, 1273]],\n  $ = (t, e, s) => (t = t[(e = Array.isArray(e) ? e : e.split(\".\"))[0]]) && e.length > 1 ? $(t, e.slice(1)) : void 0 === t ? s : t,\n  w = (t, e = 10) => Math.round(t * e) / e,\n  C = [[-1, 0], [0, -1], [1, 0], [0, 1]],\n  k = [[[0, 0], [0, 1]], [[0, 0], [1, 0]], [[1, 0], [1, 1]], [[0, 1], [1, 1]]];\nclass y {\n  constructor(t) {\n    this.options = {\n      ecl: \"M\",\n      content: \"\"\n    }, this.qrcode = void 0;\n    for (const e in t) this.options[e] = t[e];\n    if (0 === this.options.content.length) throw new Error(\"Expected 'content' to be non-empty!\");\n    const e = this.options.content,\n      s = this.getTypeNumber(e, this.options.ecl),\n      r = this.getErrorCorrectLevel(this.options.ecl);\n    this.qrcode = new g(s, r), this.qrcode.addData(e), this.qrcode.make();\n  }\n  getErrorCorrectLevel(t) {\n    const s = e[t];\n    if (null == s) throw new Error(\"Unknwon error correction level: \" + t);\n    return s;\n  }\n  getTypeNumber(t, e) {\n    const s = (t => {\n      const e = encodeURI(t).toString().replace(/%[0-9a-fA-F]{2}/g, \"a\");\n      return e.length + (e.length !== t ? 3 : 0);\n    })(t);\n    let r = 1,\n      o = 0,\n      n = 0;\n    const i = m.length;\n    for (; n <= i; n++) {\n      const t = m[n];\n      if (!t) throw new Error(\"Content too long: expected \" + o + \" but got \" + s);\n      switch (e) {\n        case \"L\":\n          o = t[0];\n          break;\n        case \"M\":\n          o = t[1];\n          break;\n        case \"Q\":\n          o = t[2];\n          break;\n        case \"H\":\n          o = t[3];\n          break;\n        default:\n          throw new Error(\"Unknwon error correction level: \" + e);\n      }\n      if (s <= o) break;\n      r++;\n    }\n    if (r > m.length) throw new Error(\"Content too long\");\n    return r;\n  }\n  emptyCenter(t, e) {\n    const {\n        size: s\n      } = this,\n      r = s / 2,\n      o = t / 2,\n      n = (e = e || t) / 2;\n    for (let t = 0; t < s; t++) for (let e = 0; e < s; e++) t >= r - n && t < r + n && e >= r - o && e < r + o && (this.matrix[t][e] = !1);\n  }\n  get matrix() {\n    return this.qrcode.modules;\n  }\n  get size() {\n    return this.qrcode.moduleCount;\n  }\n}\nconst L = (t, e, s, r = []) => {\n  r.push(e);\n  for (const o of C) {\n    const n = {\n      x: e.x + o[0],\n      y: e.y + o[1]\n    };\n    if (!r.find(t => t.x === n.x && t.y === n.y)) {\n      const e = $(t, [n.y, n.x]);\n      e && e.pride === s && L(t, e, e.pride, r);\n    }\n  }\n};\nclass b {\n  constructor(t, e) {\n    this.options = {\n      size: 0,\n      radiusFactor: .75,\n      roundOuterCorners: !0,\n      roundInnerCorners: !0,\n      cornerBlocksAsCircles: !1,\n      fill: \"currentColor\"\n    }, this.matrix = void 0, this.paths = [], this.matrixSize = void 0, this.lines = {}, this.lastUniqId = 0, this.pointSize = void 0;\n    for (const t in e) this.options[t] = e[t];\n    if (void 0 === this.options.cornerBlockRadiusFactor && (this.options.cornerBlockRadiusFactor = this.options.radiusFactor), !(this.options.size > 0)) throw new Error(\"Expected 'size' value to be higher than zero!\");\n    this.matrixSize = t.size, this.pointSize = this.options.size / this.matrixSize, this.matrix = (() => {\n      const e = [];\n      return t.matrix.forEach((t, s) => {\n        e[s] = [], t.forEach((t, r) => {\n          e[s][r] = {\n            pride: t ? 1 : 0,\n            x: r,\n            y: s,\n            blockId: void 0,\n            isCornerBlock: !1\n          };\n        });\n      }), e;\n    })(), this.detectBlocks(), this.detectLines(), this.generatePaths();\n  }\n  detectBlocks() {\n    const {\n      matrixSize: t,\n      matrix: e\n    } = this;\n    for (let s = 0; s < t; s++) for (let r = 0; r < t; r++) {\n      const t = e[s][r];\n      if (void 0 === t.blockId && 1 === t.pride) {\n        const s = [];\n        L(e, t, 1, s);\n        const r = this.getUniqId();\n        s.forEach(t => {\n          const {\n            x: e,\n            y: s\n          } = t;\n          t.blockId = r, (e < 8 && s < 8 || e > this.matrixSize - 8 && s < 8 || e < 8 && s > this.matrixSize - 8) && (t.isCornerBlock = !0);\n        });\n      }\n    }\n  }\n  detectLines() {\n    const {\n        lines: t,\n        matrixSize: e,\n        matrix: s\n      } = this,\n      r = this.pointSize / 2 * Math.min(this.options.radiusFactor, 10),\n      o = this.pointSize / 2 * Math.min(this.options.cornerBlockRadiusFactor, 10);\n    for (let n = 0; n < e; n++) for (let i = 0; i < e; i++) {\n      const e = s[n][i];\n      void 0 !== e.blockId && (e.isCornerBlock && this.options.cornerBlocksAsCircles || C.forEach((h, l) => {\n        const a = $(s, [n + h[0], i + h[1]]);\n        a && a.blockId === e.blockId || e.blockId && (t[e.blockId] = t[e.blockId] || [], t[e.blockId].push({\n          processed: !1,\n          p1: {\n            y: n + k[l][0][0],\n            x: i + k[l][0][1]\n          },\n          p2: {\n            y: n + k[l][1][0],\n            x: i + k[l][1][1]\n          },\n          cell: e,\n          cr: e.isCornerBlock ? o : r\n        }));\n      }));\n    }\n    Object.keys(t).forEach(e => {\n      const s = t[e],\n        r = (t, e, o, n) => {\n          const i = s.filter(s => !s.processed && (s.p1.y === t && s.p1.x === e || s.p2.y === t && s.p2.x === e)).sort((t, e) => t.cell === n ? -1 : 1)[0];\n          if (i) {\n            let s;\n            i.processed = !0, i.p1.y === t && i.p1.x === e ? s = {\n              p1: i.p1,\n              p2: i.p2,\n              cr: i.cr\n            } : i.p2.y === t && i.p2.x === e && (s = {\n              p1: i.p2,\n              p2: i.p1,\n              cr: i.cr\n            }), o.push(s), r(s.p2.y, s.p2.x, o, i.cell);\n          }\n        };\n      s[0].processed = !0;\n      const o = [s[0]];\n      r(s[0].p2.y, s[0].p2.x, o, s[0].cell), t[e] = o, t[e].crops = [];\n      let n = !0;\n      for (; n;) {\n        const o = s.find(t => !t.processed);\n        if (o) {\n          var i, h;\n          o.processed = !0;\n          const s = [o];\n          r(o.p2.y, o.p2.x, s, o.cell), s.reverse(), s.map(t => {\n            const e = t.p2;\n            return t.p2 = t.p1, t.p1 = e, t;\n          }), null == (i = t[e]) || null == (h = i.crops) || h.push(s);\n        } else n = !1;\n      }\n    });\n  }\n  getDir(t) {\n    return t.p1.x === t.p2.x ? t.p1.y > t.p2.y ? \"sn\" : \"ns\" : t.p1.y === t.p2.y ? t.p1.x > t.p2.x ? \"ew\" : \"we\" : void 0;\n  }\n  getSubPath(t, e, s, r) {\n    const {\n      pointSize: o\n    } = this;\n    let {\n      p1: {\n        x: n,\n        y: i\n      },\n      cr: h\n    } = t;\n    n *= o, i *= o;\n    const l = w(n - h),\n      a = w(n + h),\n      c = w(i - h),\n      u = w(i + h);\n    n = w(n), i = w(i);\n    const d = this.getDir(t),\n      p = this.getDir(e);\n    let f = \"\";\n    return h && s && \"we\" === p && \"ns\" === d ? (f += `L${l} ${i} `, f += `Q${n} ${i} ${n} ${u}`) : h && s && \"ns\" === p && \"ew\" === d ? (f += `L${n} ${c} `, f += `Q${n} ${i} ${l} ${i}`) : h && s && \"ew\" === p && \"sn\" === d ? (f += `L${a} ${i} `, f += `Q${n} ${i} ${n} ${c}`) : h && s && \"sn\" === p && \"we\" === d ? (f += `L${n} ${u} `, f += `Q${n} ${i} ${a} ${i}`) : h && r && \"sn\" === p && \"ew\" === d ? (f += `L${n} ${u} `, f += `Q${n} ${i} ${l} ${i}`) : h && r && \"ew\" === p && \"ns\" === d ? (f += `L${a} ${i} `, f += `Q${n} ${i} ${n} ${u}`) : h && r && \"ns\" === p && \"we\" === d ? (f += `L${n} ${c} `, f += `Q${n} ${i} ${a} ${i}`) : h && r && \"we\" === p && \"sn\" === d ? (f += `L${l} ${i} `, f += `Q${n} ${i} ${n} ${c}`) : f += `L${n} ${i} `, f;\n  }\n  getUniqId() {\n    return String(this.lastUniqId++);\n  }\n  generatePaths() {\n    const {\n        pointSize: t,\n        options: {\n          roundOuterCorners: e,\n          roundInnerCorners: s,\n          cornerBlocksAsCircles: r\n        }\n      } = this,\n      {\n        lines: o\n      } = this,\n      n = [];\n    if (Object.keys(o).forEach(r => {\n      let i = \"\";\n      for (const [n, h] of [o[r], ...o[r].crops].entries()) for (const [r, o] of h.entries()) {\n        let {\n          p1: {\n            x: l,\n            y: a\n          },\n          cr: c\n        } = o;\n        l *= t, a *= t;\n        const u = w(l + c),\n          d = w(a + c);\n        l = w(l), a = w(a);\n        const p = h[r - 1] || h[h.length - 1],\n          f = h[r + 1] || h[0],\n          g = this.getDir(o),\n          m = this.getDir(p);\n        0 === r ? i += e ? 0 === n ? `M${u} ${a} ` : `M${l} ${d} ` : `M${l} ${a} ` : r === h.length - 1 ? (i += this.getSubPath(o, p, e, s), i += this.getSubPath(f, o, e, s), i += \"Z\") : m !== g && (i += this.getSubPath(o, p, e, s));\n      }\n      n.push(`<path d=\"${i}\"/>`);\n    }), r) {\n      const t = this.pointSize * this.matrixSize - 7 * this.pointSize;\n      [[0, 0], [t, 0], [0, t]].forEach(([t, e]) => {\n        const s = w(7 * this.pointSize / 2 + t),\n          r = w(7 * this.pointSize / 2 + e);\n        let o = w(7 * this.pointSize / 2);\n        const i = w(7 * this.pointSize / 2 - this.pointSize);\n        n.push(`<path d=\"M ${s} ${r - o} A ${o} ${o} 0 1 0 ${s} ${w(r + o)} A ${o} ${o} 0 1 0 ${s} ${w(r - o)} Z M ${s} ${r - i} A ${i} ${i} 0 1 1 ${s} ${w(r + i)} A ${i} ${i} 0 1 1 ${s} ${w(r - i)} Z\" />`), o = w(7 * this.pointSize / 2 - 2 * this.pointSize), n.push(`<path d=\"M ${s} ${r - o} A ${o} ${o} 0 1 0 ${s} ${w(r + o)} A ${o} ${o} 0 1 0 ${s} ${w(r - o)} Z\" />`);\n      });\n    }\n    this.paths = n;\n  }\n  svgAdditionalContent(t) {\n    return \"function\" == typeof t ? t(this) : \"string\" == typeof t ? t : t || \"\";\n  }\n  get svg() {\n    const {\n      size: t,\n      fill: e\n    } = this.options;\n    return `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${t} ${t}\" width=\"${t}\" height=\"${t}\" fill=\"${e}\">\\n${this.svgAdditionalContent(this.options.preContent)}\\n${this.paths.join(\"\\n\")}\\n${this.svgAdditionalContent(this.options.postContent)}\\n</svg>`;\n  }\n}\nexport { y as QRCode, b as QRSvg };","map":{"version":3,"names":["t","constructor","mode","data","parsedData","e","s","length","charCodeAt","push","Array","prototype","concat","apply","unshift","getLength","write","put","L","M","Q","H","totalCount","dataCount","getRSBlocks","r","getRsBlockTable","Error","o","n","i","RS_BLOCK_TABLE","buffer","get","Math","floor","putBit","getLengthInBits","h","l","num","multiply","mod","a","c","u","getMask","d","p","f","getModuleCount","isDark","abs","g","typeNumber","errorCorrectLevel","modules","moduleCount","dataCache","dataList","addData","make","makeImpl","getBestMaskPattern","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","createMovieClip","createEmptyMovieClip","beginFill","moveTo","lineTo","endFill","createBytes","max","m","$","getProp","isArray","split","slice","w","round","C","k","y","options","ecl","content","qrcode","getTypeNumber","getErrorCorrectLevel","encodeURI","toString","replace","emptyCenter","size","matrix","findNeighbors","x","find","pride","b","radiusFactor","roundOuterCorners","roundInnerCorners","cornerBlocksAsCircles","fill","paths","matrixSize","lines","lastUniqId","pointSize","cornerBlockRadiusFactor","forEach","blockId","isCornerBlock","detectBlocks","detectLines","generatePaths","getUniqId","min","processed","p1","p2","cell","cr","Object","keys","proc","filter","sort","crops","reverse","map","getDir","getSubPath","String","entries","svgAdditionalContent","svg","preContent","join","postContent","QRCode","QRSvg"],"sources":["/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QR8bitByte.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QRMode.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QRErrorCorrectLevel.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QRRSBlock.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QRBitBuffer.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QRMath.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QRPolynomial.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QRUtil.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QRMaskPattern.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QRCodeModel.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QRCodeLimitLength.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/utils.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QRCode.ts","/Users/dmitrijponomarev/Desktop/1337/client/node_modules/sexy-qr/src/QRSvg.ts"],"sourcesContent":["import { QRMode } from './QRMode';\n\nexport class QR8bitByte {\n  mode = QRMode.MODE_8BIT_BYTE;\n\n  data: string;\n\n  parsedData: (number[] | number)[] = [];\n\n  constructor(data) {\n    this.data = data;\n\n    // Added to support UTF-8 Characters\n    let i = 0;\n    const l = this.data.length;\n    for (; i < l; i++) {\n      const code = this.data.charCodeAt(i);\n\n      let byteArray: number[];\n      if (code > 0x10000) {\n        // prettier-ignore\n        byteArray = [\n          0xf0 | ((code & 0x1c0000) >>> 18),\n          0x80 | ((code & 0x3f000) >>> 12),\n          0x80 | ((code & 0xfc0) >>> 6),\n          0x80 | (code & 0x3f),\n        ];\n      } else if (code > 0x800) {\n        // prettier-ignore\n        byteArray = [\n          0xe0 | ((code & 0xf000) >>> 12),\n          0x80 | ((code & 0xfc0) >>> 6),\n          0x80 | (code & 0x3f),\n        ]\n      } else if (code > 0x80) {\n        // prettier-ignore\n        byteArray = [\n          0xc0 | ((code & 0x7c0) >>> 6),\n          0x80 | (code & 0x3f),\n        ]\n      } else {\n        byteArray = [code];\n      }\n\n      this.parsedData.push(byteArray);\n    }\n\n    this.parsedData = Array.prototype.concat.apply([], this.parsedData);\n\n    if (this.parsedData.length !== this.data.length) {\n      this.parsedData.unshift(191);\n      this.parsedData.unshift(187);\n      this.parsedData.unshift(239);\n    }\n  }\n\n  getLength() {\n    return this.parsedData.length;\n  }\n\n  write(buffer) {\n    let i = 0;\n    const l = this.parsedData.length;\n    for (; i < l; i++) {\n      buffer.put(this.parsedData[i], 8);\n    }\n  }\n}\n","export const QRMode = {\n  MODE_NUMBER: 1 << 0,\n  MODE_ALPHA_NUM: 1 << 1,\n  MODE_8BIT_BYTE: 1 << 2,\n  MODE_KANJI: 1 << 3,\n};\n\nexport type QRMode = typeof QRMode[keyof typeof QRMode];\n","export const QRErrorCorrectLevel = {\n  L: 1,\n  M: 0,\n  Q: 3,\n  H: 2,\n};\n\nexport type QRErrorCorrectLevel = typeof QRErrorCorrectLevel[keyof typeof QRErrorCorrectLevel];\n","import { QRErrorCorrectLevel } from './QRErrorCorrectLevel';\n\nexport class QRRSBlock {\n  totalCount!: number;\n  dataCount!: number;\n\n  constructor(totalCount, dataCount) {\n    this.totalCount = totalCount;\n    this.dataCount = dataCount;\n  }\n\n  static RS_BLOCK_TABLE = [\n    [1, 26, 19],\n    [1, 26, 16],\n    [1, 26, 13],\n    [1, 26, 9],\n    [1, 44, 34],\n    [1, 44, 28],\n    [1, 44, 22],\n    [1, 44, 16],\n    [1, 70, 55],\n    [1, 70, 44],\n    [2, 35, 17],\n    [2, 35, 13],\n    [1, 100, 80],\n    [2, 50, 32],\n    [2, 50, 24],\n    [4, 25, 9],\n    [1, 134, 108],\n    [2, 67, 43],\n    [2, 33, 15, 2, 34, 16],\n    [2, 33, 11, 2, 34, 12],\n    [2, 86, 68],\n    [4, 43, 27],\n    [4, 43, 19],\n    [4, 43, 15],\n    [2, 98, 78],\n    [4, 49, 31],\n    [2, 32, 14, 4, 33, 15],\n    [4, 39, 13, 1, 40, 14],\n    [2, 121, 97],\n    [2, 60, 38, 2, 61, 39],\n    [4, 40, 18, 2, 41, 19],\n    [4, 40, 14, 2, 41, 15],\n    [2, 146, 116],\n    [3, 58, 36, 2, 59, 37],\n    [4, 36, 16, 4, 37, 17],\n    [4, 36, 12, 4, 37, 13],\n    [2, 86, 68, 2, 87, 69],\n    [4, 69, 43, 1, 70, 44],\n    [6, 43, 19, 2, 44, 20],\n    [6, 43, 15, 2, 44, 16],\n    [4, 101, 81],\n    [1, 80, 50, 4, 81, 51],\n    [4, 50, 22, 4, 51, 23],\n    [3, 36, 12, 8, 37, 13],\n    [2, 116, 92, 2, 117, 93],\n    [6, 58, 36, 2, 59, 37],\n    [4, 46, 20, 6, 47, 21],\n    [7, 42, 14, 4, 43, 15],\n    [4, 133, 107],\n    [8, 59, 37, 1, 60, 38],\n    [8, 44, 20, 4, 45, 21],\n    [12, 33, 11, 4, 34, 12],\n    [3, 145, 115, 1, 146, 116],\n    [4, 64, 40, 5, 65, 41],\n    [11, 36, 16, 5, 37, 17],\n    [11, 36, 12, 5, 37, 13],\n    [5, 109, 87, 1, 110, 88],\n    [5, 65, 41, 5, 66, 42],\n    [5, 54, 24, 7, 55, 25],\n    [11, 36, 12],\n    [5, 122, 98, 1, 123, 99],\n    [7, 73, 45, 3, 74, 46],\n    [15, 43, 19, 2, 44, 20],\n    [3, 45, 15, 13, 46, 16],\n    [1, 135, 107, 5, 136, 108],\n    [10, 74, 46, 1, 75, 47],\n    [1, 50, 22, 15, 51, 23],\n    [2, 42, 14, 17, 43, 15],\n    [5, 150, 120, 1, 151, 121],\n    [9, 69, 43, 4, 70, 44],\n    [17, 50, 22, 1, 51, 23],\n    [2, 42, 14, 19, 43, 15],\n    [3, 141, 113, 4, 142, 114],\n    [3, 70, 44, 11, 71, 45],\n    [17, 47, 21, 4, 48, 22],\n    [9, 39, 13, 16, 40, 14],\n    [3, 135, 107, 5, 136, 108],\n    [3, 67, 41, 13, 68, 42],\n    [15, 54, 24, 5, 55, 25],\n    [15, 43, 15, 10, 44, 16],\n    [4, 144, 116, 4, 145, 117],\n    [17, 68, 42],\n    [17, 50, 22, 6, 51, 23],\n    [19, 46, 16, 6, 47, 17],\n    [2, 139, 111, 7, 140, 112],\n    [17, 74, 46],\n    [7, 54, 24, 16, 55, 25],\n    [34, 37, 13],\n    [4, 151, 121, 5, 152, 122],\n    [4, 75, 47, 14, 76, 48],\n    [11, 54, 24, 14, 55, 25],\n    [16, 45, 15, 14, 46, 16],\n    [6, 147, 117, 4, 148, 118],\n    [6, 73, 45, 14, 74, 46],\n    [11, 54, 24, 16, 55, 25],\n    [30, 46, 16, 2, 47, 17],\n    [8, 132, 106, 4, 133, 107],\n    [8, 75, 47, 13, 76, 48],\n    [7, 54, 24, 22, 55, 25],\n    [22, 45, 15, 13, 46, 16],\n    [10, 142, 114, 2, 143, 115],\n    [19, 74, 46, 4, 75, 47],\n    [28, 50, 22, 6, 51, 23],\n    [33, 46, 16, 4, 47, 17],\n    [8, 152, 122, 4, 153, 123],\n    [22, 73, 45, 3, 74, 46],\n    [8, 53, 23, 26, 54, 24],\n    [12, 45, 15, 28, 46, 16],\n    [3, 147, 117, 10, 148, 118],\n    [3, 73, 45, 23, 74, 46],\n    [4, 54, 24, 31, 55, 25],\n    [11, 45, 15, 31, 46, 16],\n    [7, 146, 116, 7, 147, 117],\n    [21, 73, 45, 7, 74, 46],\n    [1, 53, 23, 37, 54, 24],\n    [19, 45, 15, 26, 46, 16],\n    [5, 145, 115, 10, 146, 116],\n    [19, 75, 47, 10, 76, 48],\n    [15, 54, 24, 25, 55, 25],\n    [23, 45, 15, 25, 46, 16],\n    [13, 145, 115, 3, 146, 116],\n    [2, 74, 46, 29, 75, 47],\n    [42, 54, 24, 1, 55, 25],\n    [23, 45, 15, 28, 46, 16],\n    [17, 145, 115],\n    [10, 74, 46, 23, 75, 47],\n    [10, 54, 24, 35, 55, 25],\n    [19, 45, 15, 35, 46, 16],\n    [17, 145, 115, 1, 146, 116],\n    [14, 74, 46, 21, 75, 47],\n    [29, 54, 24, 19, 55, 25],\n    [11, 45, 15, 46, 46, 16],\n    [13, 145, 115, 6, 146, 116],\n    [14, 74, 46, 23, 75, 47],\n    [44, 54, 24, 7, 55, 25],\n    [59, 46, 16, 1, 47, 17],\n    [12, 151, 121, 7, 152, 122],\n    [12, 75, 47, 26, 76, 48],\n    [39, 54, 24, 14, 55, 25],\n    [22, 45, 15, 41, 46, 16],\n    [6, 151, 121, 14, 152, 122],\n    [6, 75, 47, 34, 76, 48],\n    [46, 54, 24, 10, 55, 25],\n    [2, 45, 15, 64, 46, 16],\n    [17, 152, 122, 4, 153, 123],\n    [29, 74, 46, 14, 75, 47],\n    [49, 54, 24, 10, 55, 25],\n    [24, 45, 15, 46, 46, 16],\n    [4, 152, 122, 18, 153, 123],\n    [13, 74, 46, 32, 75, 47],\n    [48, 54, 24, 14, 55, 25],\n    [42, 45, 15, 32, 46, 16],\n    [20, 147, 117, 4, 148, 118],\n    [40, 75, 47, 7, 76, 48],\n    [43, 54, 24, 22, 55, 25],\n    [10, 45, 15, 67, 46, 16],\n    [19, 148, 118, 6, 149, 119],\n    [18, 75, 47, 31, 76, 48],\n    [34, 54, 24, 34, 55, 25],\n    [20, 45, 15, 61, 46, 16],\n  ];\n\n  static getRSBlocks(typeNumber, errorCorrectLevel) {\n    const rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n    if (rsBlock === undefined) {\n      throw new Error('bad rs block @ typeNumber:' + typeNumber + '/errorCorrectLevel:' + errorCorrectLevel);\n    }\n    const length = rsBlock.length / 3;\n    const list: QRRSBlock[] = [];\n    for (let i = 0; i < length; i++) {\n      const count = rsBlock[i * 3];\n      const totalCount = rsBlock[i * 3 + 1];\n      const dataCount = rsBlock[i * 3 + 2];\n      for (let j = 0; j < count; j++) {\n        list.push(new QRRSBlock(totalCount, dataCount));\n      }\n    }\n    return list;\n  }\n\n  static getRsBlockTable(typeNumber, errorCorrectLevel) {\n    switch (errorCorrectLevel) {\n      case QRErrorCorrectLevel.L:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4];\n      case QRErrorCorrectLevel.M:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n      case QRErrorCorrectLevel.Q:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n      case QRErrorCorrectLevel.H:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n      default:\n        return undefined;\n    }\n  }\n}\n","export class QRBitBuffer {\n  buffer: number[] = [];\n\n  length = 0;\n\n  constructor() {}\n\n  get(index) {\n    const bufIndex = Math.floor(index / 8);\n    return ((this.buffer[bufIndex] >>> (7 - (index % 8))) & 1) === 1;\n  }\n\n  put(num, length) {\n    for (let i = 0; i < length; i++) {\n      this.putBit(((num >>> (length - i - 1)) & 1) === 1);\n    }\n  }\n\n  getLengthInBits() {\n    return this.length;\n  }\n\n  putBit(bit) {\n    const bufIndex = Math.floor(this.length / 8);\n    if (this.buffer.length <= bufIndex) {\n      this.buffer.push(0);\n    }\n    if (bit) {\n      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n    }\n    this.length++;\n  }\n}\n","export const [EXP_TABLE, LOG_TABLE] = (() => {\n  const EXP_TABLE = new Array(256);\n  const LOG_TABLE = new Array(256);\n\n  for (let i = 0; i < 8; i++) {\n    EXP_TABLE[i] = 1 << i;\n  }\n  for (let i = 8; i < 256; i++) {\n    EXP_TABLE[i] = EXP_TABLE[i - 4] ^ EXP_TABLE[i - 5] ^ EXP_TABLE[i - 6] ^ EXP_TABLE[i - 8];\n  }\n  for (let i = 0; i < 255; i++) {\n    LOG_TABLE[EXP_TABLE[i]] = i;\n  }\n\n  return [EXP_TABLE, LOG_TABLE];\n})();\n\nexport const glog = (n) => {\n  if (n < 1) {\n    throw new Error('glog(' + n + ')');\n  }\n  return LOG_TABLE[n];\n};\n\nexport const gexp = (n) => {\n  while (n < 0) {\n    n += 255;\n  }\n  while (n >= 256) {\n    n -= 255;\n  }\n  return EXP_TABLE[n];\n};\n","import * as QRMath from './QRMath';\n\nexport class QRPolynomial {\n  num: number[];\n\n  constructor(num, shift) {\n    if (num.length === undefined) {\n      throw new Error(num.length + '/' + shift);\n    }\n    let offset = 0;\n    while (offset < num.length && num[offset] === 0) {\n      offset++;\n    }\n    this.num = new Array(num.length - offset + shift);\n    for (let i = 0; i < num.length - offset; i++) {\n      this.num[i] = num[i + offset];\n    }\n  }\n\n  get(index) {\n    return this.num[index];\n  }\n\n  getLength() {\n    return this.num.length;\n  }\n\n  multiply(e) {\n    const num = new Array(this.getLength() + e.getLength() - 1);\n    for (let i = 0; i < this.getLength(); i++) {\n      for (let j = 0; j < e.getLength(); j++) {\n        num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));\n      }\n    }\n    return new QRPolynomial(num, 0);\n  }\n\n  mod(e) {\n    if (this.getLength() - e.getLength() < 0) {\n      return this;\n    }\n    const ratio = QRMath.glog(this.get(0)) - QRMath.glog(e.get(0));\n    const num = new Array(this.getLength());\n    for (let i = 0; i < this.getLength(); i++) {\n      num[i] = this.get(i);\n    }\n    for (let i = 0; i < e.getLength(); i++) {\n      num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);\n    }\n    return new QRPolynomial(num, 0).mod(e);\n  }\n}\n","import { QRMaskPattern } from './QRMaskPattern';\nimport { QRPolynomial } from './QRPolynomial';\nimport { QRMode } from './QRMode';\nimport * as QRMath from './QRMath';\n\nexport const PATTERN_POSITION_TABLE = [\n  [],\n  [6, 18],\n  [6, 22],\n  [6, 26],\n  [6, 30],\n  [6, 34],\n  [6, 22, 38],\n  [6, 24, 42],\n  [6, 26, 46],\n  [6, 28, 50],\n  [6, 30, 54],\n  [6, 32, 58],\n  [6, 34, 62],\n  [6, 26, 46, 66],\n  [6, 26, 48, 70],\n  [6, 26, 50, 74],\n  [6, 30, 54, 78],\n  [6, 30, 56, 82],\n  [6, 30, 58, 86],\n  [6, 34, 62, 90],\n  [6, 28, 50, 72, 94],\n  [6, 26, 50, 74, 98],\n  [6, 30, 54, 78, 102],\n  [6, 28, 54, 80, 106],\n  [6, 32, 58, 84, 110],\n  [6, 30, 58, 86, 114],\n  [6, 34, 62, 90, 118],\n  [6, 26, 50, 74, 98, 122],\n  [6, 30, 54, 78, 102, 126],\n  [6, 26, 52, 78, 104, 130],\n  [6, 30, 56, 82, 108, 134],\n  [6, 34, 60, 86, 112, 138],\n  [6, 30, 58, 86, 114, 142],\n  [6, 34, 62, 90, 118, 146],\n  [6, 30, 54, 78, 102, 126, 150],\n  [6, 24, 50, 76, 102, 128, 154],\n  [6, 28, 54, 80, 106, 132, 158],\n  [6, 32, 58, 84, 110, 136, 162],\n  [6, 26, 54, 82, 110, 138, 166],\n  [6, 30, 58, 86, 114, 142, 170],\n];\n\nexport const G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);\n\nexport const G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);\n\nexport const G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);\n\nexport const getBCHDigit = (data) => {\n  let digit = 0;\n  while (data !== 0) {\n    digit++;\n    data >>>= 1;\n  }\n  return digit;\n};\n\nexport const getBCHTypeInfo = (data) => {\n  let d = data << 10;\n  while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n    d ^= G15 << (getBCHDigit(d) - getBCHDigit(G15));\n  }\n  return ((data << 10) | d) ^ G15_MASK;\n};\n\nexport const getBCHTypeNumber = (data) => {\n  let d = data << 12;\n  while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n    d ^= G18 << (getBCHDigit(d) - getBCHDigit(G18));\n  }\n  return (data << 12) | d;\n};\n\nexport const getPatternPosition = (typeNumber) => {\n  return PATTERN_POSITION_TABLE[typeNumber - 1];\n};\n\nexport const getMask = (maskPattern, i, j) => {\n  switch (maskPattern) {\n    case QRMaskPattern.PATTERN000:\n      return (i + j) % 2 === 0;\n    case QRMaskPattern.PATTERN001:\n      return i % 2 === 0;\n    case QRMaskPattern.PATTERN010:\n      return j % 3 === 0;\n    case QRMaskPattern.PATTERN011:\n      return (i + j) % 3 === 0;\n    case QRMaskPattern.PATTERN100:\n      return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;\n    case QRMaskPattern.PATTERN101:\n      return ((i * j) % 2) + ((i * j) % 3) === 0;\n    case QRMaskPattern.PATTERN110:\n      return (((i * j) % 2) + ((i * j) % 3)) % 2 === 0;\n    case QRMaskPattern.PATTERN111:\n      return (((i * j) % 3) + ((i + j) % 2)) % 2 === 0;\n    default:\n      throw new Error('bad maskPattern:' + maskPattern);\n  }\n};\n\nexport const getErrorCorrectPolynomial = (errorCorrectLength) => {\n  let a = new QRPolynomial([1], 0);\n  for (let i = 0; i < errorCorrectLength; i++) {\n    a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));\n  }\n  return a;\n};\n\nexport const getLengthInBits = (mode, type) => {\n  if (1 <= type && type < 10) {\n    switch (mode) {\n      case QRMode.MODE_NUMBER:\n        return 10;\n      case QRMode.MODE_ALPHA_NUM:\n        return 9;\n      case QRMode.MODE_8BIT_BYTE:\n        return 8;\n      case QRMode.MODE_KANJI:\n        return 8;\n      default:\n        throw new Error('mode:' + mode);\n    }\n  } else if (type < 27) {\n    switch (mode) {\n      case QRMode.MODE_NUMBER:\n        return 12;\n      case QRMode.MODE_ALPHA_NUM:\n        return 11;\n      case QRMode.MODE_8BIT_BYTE:\n        return 16;\n      case QRMode.MODE_KANJI:\n        return 10;\n      default:\n        throw new Error('mode:' + mode);\n    }\n  } else if (type < 41) {\n    switch (mode) {\n      case QRMode.MODE_NUMBER:\n        return 14;\n      case QRMode.MODE_ALPHA_NUM:\n        return 13;\n      case QRMode.MODE_8BIT_BYTE:\n        return 16;\n      case QRMode.MODE_KANJI:\n        return 12;\n      default:\n        throw new Error('mode:' + mode);\n    }\n  } else {\n    throw new Error('type:' + type);\n  }\n};\n\nexport const getLostPoint = (qrCode) => {\n  const moduleCount = qrCode.getModuleCount();\n  let lostPoint = 0;\n  for (let row = 0; row < moduleCount; row++) {\n    for (let col = 0; col < moduleCount; col++) {\n      let sameCount = 0;\n      const dark = qrCode.isDark(row, col);\n      for (let r = -1; r <= 1; r++) {\n        if (row + r < 0 || moduleCount <= row + r) {\n          continue;\n        }\n        for (let c = -1; c <= 1; c++) {\n          if (col + c < 0 || moduleCount <= col + c) {\n            continue;\n          }\n          if (r === 0 && c === 0) {\n            continue;\n          }\n          if (dark === qrCode.isDark(row + r, col + c)) {\n            sameCount++;\n          }\n        }\n      }\n      if (sameCount > 5) {\n        lostPoint += 3 + sameCount - 5;\n      }\n    }\n  }\n  for (let row = 0; row < moduleCount - 1; row++) {\n    for (let col = 0; col < moduleCount - 1; col++) {\n      let count = 0;\n      if (qrCode.isDark(row, col)) count++;\n      if (qrCode.isDark(row + 1, col)) count++;\n      if (qrCode.isDark(row, col + 1)) count++;\n      if (qrCode.isDark(row + 1, col + 1)) count++;\n      if (count === 0 || count === 4) {\n        lostPoint += 3;\n      }\n    }\n  }\n  for (let row = 0; row < moduleCount; row++) {\n    for (let col = 0; col < moduleCount - 6; col++) {\n      if (\n        qrCode.isDark(row, col) &&\n        !qrCode.isDark(row, col + 1) &&\n        qrCode.isDark(row, col + 2) &&\n        qrCode.isDark(row, col + 3) &&\n        qrCode.isDark(row, col + 4) &&\n        !qrCode.isDark(row, col + 5) &&\n        qrCode.isDark(row, col + 6)\n      ) {\n        lostPoint += 40;\n      }\n    }\n  }\n  for (let col = 0; col < moduleCount; col++) {\n    for (let row = 0; row < moduleCount - 6; row++) {\n      if (\n        qrCode.isDark(row, col) &&\n        !qrCode.isDark(row + 1, col) &&\n        qrCode.isDark(row + 2, col) &&\n        qrCode.isDark(row + 3, col) &&\n        qrCode.isDark(row + 4, col) &&\n        !qrCode.isDark(row + 5, col) &&\n        qrCode.isDark(row + 6, col)\n      ) {\n        lostPoint += 40;\n      }\n    }\n  }\n  let darkCount = 0;\n  for (let col = 0; col < moduleCount; col++) {\n    for (let row = 0; row < moduleCount; row++) {\n      if (qrCode.isDark(row, col)) {\n        darkCount++;\n      }\n    }\n  }\n  const ratio = Math.abs((100 * darkCount) / moduleCount / moduleCount - 50) / 5;\n  lostPoint += ratio * 10;\n  return lostPoint;\n};\n","export const QRMaskPattern = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7,\n};\n\nexport type QRMaskPattern = typeof QRMaskPattern[keyof typeof QRMaskPattern];\n","import { QR8bitByte } from './QR8bitByte';\nimport { QRRSBlock } from './QRRSBlock';\nimport { QRBitBuffer } from './QRBitBuffer';\nimport { QRPolynomial } from './QRPolynomial';\nimport * as QRUtil from './QRUtil';\n\nconst PAD0 = 0xec;\nconst PAD1 = 0x11;\n\nexport class QRCodeModel {\n  typeNumber!: number;\n  errorCorrectLevel!: number;\n  modules: (boolean | null)[][] = [];\n  moduleCount = 0;\n  dataCache: number[] | null = null;\n  dataList: QR8bitByte[] = [];\n\n  constructor(typeNumber, errorCorrectLevel) {\n    this.typeNumber = typeNumber;\n    this.errorCorrectLevel = errorCorrectLevel;\n  }\n\n  addData(data) {\n    const newData = new QR8bitByte(data);\n    this.dataList.push(newData);\n    this.dataCache = null;\n  }\n\n  isDark(row, col) {\n    if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n      throw new Error(row + ',' + col);\n    }\n    return this.modules[row][col];\n  }\n\n  getModuleCount() {\n    return this.moduleCount;\n  }\n\n  make() {\n    this.makeImpl(false, this.getBestMaskPattern());\n  }\n\n  makeImpl(test, maskPattern) {\n    this.moduleCount = this.typeNumber * 4 + 17;\n    this.modules = new Array(this.moduleCount);\n    for (let row = 0; row < this.moduleCount; row++) {\n      this.modules[row] = new Array(this.moduleCount);\n      for (let col = 0; col < this.moduleCount; col++) {\n        this.modules[row][col] = null;\n      }\n    }\n    this.setupPositionProbePattern(0, 0);\n    this.setupPositionProbePattern(this.moduleCount - 7, 0);\n    this.setupPositionProbePattern(0, this.moduleCount - 7);\n    this.setupPositionAdjustPattern();\n    this.setupTimingPattern();\n    this.setupTypeInfo(test, maskPattern);\n    if (this.typeNumber >= 7) {\n      this.setupTypeNumber(test);\n    }\n    if (this.dataCache == null) {\n      this.dataCache = this.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n    }\n    this.mapData(this.dataCache, maskPattern);\n  }\n\n  setupPositionProbePattern(row, col) {\n    for (let r = -1; r <= 7; r++) {\n      if (row + r <= -1 || this.moduleCount <= row + r) continue;\n      for (let c = -1; c <= 7; c++) {\n        if (col + c <= -1 || this.moduleCount <= col + c) continue;\n        this.modules[row + r][col + c] =\n          (0 <= r && r <= 6 && (c === 0 || c === 6)) ||\n          (0 <= c && c <= 6 && (r === 0 || r === 6)) ||\n          (2 <= r && r <= 4 && 2 <= c && c <= 4);\n      }\n    }\n  }\n\n  getBestMaskPattern() {\n    let minLostPoint = 0;\n    let pattern = 0;\n    for (let i = 0; i < 8; i++) {\n      this.makeImpl(true, i);\n      const lostPoint = QRUtil.getLostPoint(this);\n      if (i === 0 || minLostPoint > lostPoint) {\n        minLostPoint = lostPoint;\n        pattern = i;\n      }\n    }\n    return pattern;\n  }\n\n  createMovieClip(target_mc, instance_name, depth) {\n    const qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n    const cs = 1;\n    this.make();\n    for (let row = 0; row < this.modules.length; row++) {\n      const y = row * cs;\n      for (let col = 0; col < this.modules[row].length; col++) {\n        const x = col * cs;\n        const dark = this.modules[row][col];\n        if (dark) {\n          qr_mc.beginFill(0, 100);\n          qr_mc.moveTo(x, y);\n          qr_mc.lineTo(x + cs, y);\n          qr_mc.lineTo(x + cs, y + cs);\n          qr_mc.lineTo(x, y + cs);\n          qr_mc.endFill();\n        }\n      }\n    }\n    return qr_mc;\n  }\n\n  setupTimingPattern() {\n    for (let r = 8; r < this.moduleCount - 8; r++) {\n      if (this.modules[r][6] != null) {\n        continue;\n      }\n      this.modules[r][6] = r % 2 === 0;\n    }\n    for (let c = 8; c < this.moduleCount - 8; c++) {\n      if (this.modules[6][c] != null) {\n        continue;\n      }\n      this.modules[6][c] = c % 2 === 0;\n    }\n  }\n\n  setupPositionAdjustPattern() {\n    const pos = QRUtil.getPatternPosition(this.typeNumber);\n    for (let i = 0; i < pos.length; i++) {\n      for (let j = 0; j < pos.length; j++) {\n        const row = pos[i];\n        const col = pos[j];\n        if (this.modules[row][col] != null) {\n          continue;\n        }\n        for (let r = -2; r <= 2; r++) {\n          for (let c = -2; c <= 2; c++) {\n            if (r === -2 || r === 2 || c === -2 || c === 2 || (r === 0 && c === 0)) {\n              this.modules[row + r][col + c] = true;\n            } else {\n              this.modules[row + r][col + c] = false;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  setupTypeNumber(test) {\n    const bits = QRUtil.getBCHTypeNumber(this.typeNumber);\n    for (let i = 0; i < 18; i++) {\n      this.modules[Math.floor(i / 3)][(i % 3) + this.moduleCount - 8 - 3] = !test && ((bits >> i) & 1) === 1;\n    }\n    for (let i = 0; i < 18; i++) {\n      this.modules[(i % 3) + this.moduleCount - 8 - 3][Math.floor(i / 3)] = !test && ((bits >> i) & 1) === 1;\n    }\n  }\n\n  setupTypeInfo(test, maskPattern) {\n    const data = (this.errorCorrectLevel << 3) | maskPattern;\n    const bits = QRUtil.getBCHTypeInfo(data);\n    for (let i = 0; i < 15; i++) {\n      const mod = !test && ((bits >> i) & 1) === 1;\n      if (i < 6) {\n        this.modules[i][8] = mod;\n      } else if (i < 8) {\n        this.modules[i + 1][8] = mod;\n      } else {\n        this.modules[this.moduleCount - 15 + i][8] = mod;\n      }\n    }\n    for (let i = 0; i < 15; i++) {\n      const mod = !test && ((bits >> i) & 1) === 1;\n      if (i < 8) {\n        this.modules[8][this.moduleCount - i - 1] = mod;\n      } else if (i < 9) {\n        this.modules[8][15 - i - 1 + 1] = mod;\n      } else {\n        this.modules[8][15 - i - 1] = mod;\n      }\n    }\n    this.modules[this.moduleCount - 8][8] = !test;\n  }\n\n  mapData(data, maskPattern) {\n    let inc = -1;\n    let row = this.moduleCount - 1;\n    let bitIndex = 7;\n    let byteIndex = 0;\n    for (let col = this.moduleCount - 1; col > 0; col -= 2) {\n      if (col === 6) col--;\n      while (true) {\n        for (let c = 0; c < 2; c++) {\n          if (this.modules[row][col - c] == null) {\n            let dark = false;\n            if (byteIndex < data.length) {\n              dark = ((data[byteIndex] >>> bitIndex) & 1) === 1;\n            }\n            const mask = QRUtil.getMask(maskPattern, row, col - c);\n            if (mask) {\n              dark = !dark;\n            }\n            this.modules[row][col - c] = dark;\n            bitIndex--;\n            if (bitIndex === -1) {\n              byteIndex++;\n              bitIndex = 7;\n            }\n          }\n        }\n        row += inc;\n        if (row < 0 || this.moduleCount <= row) {\n          row -= inc;\n          inc = -inc;\n          break;\n        }\n      }\n    }\n  }\n\n  createData(typeNumber, errorCorrectLevel, dataList) {\n    const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n    const buffer = new QRBitBuffer();\n    for (let i = 0; i < dataList.length; i++) {\n      const data = dataList[i];\n      buffer.put(data.mode, 4);\n      buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));\n      data.write(buffer);\n    }\n    let totalDataCount = 0;\n    for (let i = 0; i < rsBlocks.length; i++) {\n      totalDataCount += rsBlocks[i].dataCount;\n    }\n    if (buffer.getLengthInBits() > totalDataCount * 8) {\n      throw new Error('code length overflow. (' + buffer.getLengthInBits() + '>' + totalDataCount * 8 + ')');\n    }\n    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n      buffer.put(0, 4);\n    }\n    while (buffer.getLengthInBits() % 8 !== 0) {\n      buffer.putBit(false);\n    }\n    while (true) {\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(PAD0, 8);\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(PAD1, 8);\n    }\n    return this.createBytes(buffer, rsBlocks);\n  }\n\n  createBytes(buffer, rsBlocks) {\n    let offset = 0;\n    let maxDcCount = 0;\n    let maxEcCount = 0;\n    const dcdata = new Array(rsBlocks.length);\n    const ecdata = new Array(rsBlocks.length);\n    for (let r = 0; r < rsBlocks.length; r++) {\n      const dcCount = rsBlocks[r].dataCount;\n      const ecCount = rsBlocks[r].totalCount - dcCount;\n      maxDcCount = Math.max(maxDcCount, dcCount);\n      maxEcCount = Math.max(maxEcCount, ecCount);\n      dcdata[r] = new Array(dcCount);\n      for (let i = 0; i < dcdata[r].length; i++) {\n        dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n      }\n      offset += dcCount;\n      const rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n      const rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);\n      const modPoly = rawPoly.mod(rsPoly);\n      ecdata[r] = new Array(rsPoly.getLength() - 1);\n      for (let i = 0; i < ecdata[r].length; i++) {\n        const modIndex = i + modPoly.getLength() - ecdata[r].length;\n        ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n      }\n    }\n    let totalCodeCount = 0;\n    for (let i = 0; i < rsBlocks.length; i++) {\n      totalCodeCount += rsBlocks[i].totalCount;\n    }\n    const data = new Array(totalCodeCount);\n    let index = 0;\n    for (let i = 0; i < maxDcCount; i++) {\n      for (let r = 0; r < rsBlocks.length; r++) {\n        if (i < dcdata[r].length) {\n          data[index++] = dcdata[r][i];\n        }\n      }\n    }\n    for (let i = 0; i < maxEcCount; i++) {\n      for (let r = 0; r < rsBlocks.length; r++) {\n        if (i < ecdata[r].length) {\n          data[index++] = ecdata[r][i];\n        }\n      }\n    }\n    return data;\n  }\n}\n","export const QRCodeLimitLength = [\n  [17, 14, 11, 7],\n  [32, 26, 20, 14],\n  [53, 42, 32, 24],\n  [78, 62, 46, 34],\n  [106, 84, 60, 44],\n  [134, 106, 74, 58],\n  [154, 122, 86, 64],\n  [192, 152, 108, 84],\n  [230, 180, 130, 98],\n  [271, 213, 151, 119],\n  [321, 251, 177, 137],\n  [367, 287, 203, 155],\n  [425, 331, 241, 177],\n  [458, 362, 258, 194],\n  [520, 412, 292, 220],\n  [586, 450, 322, 250],\n  [644, 504, 364, 280],\n  [718, 560, 394, 310],\n  [792, 624, 442, 338],\n  [858, 666, 482, 382],\n  [929, 711, 509, 403],\n  [1003, 779, 565, 439],\n  [1091, 857, 611, 461],\n  [1171, 911, 661, 511],\n  [1273, 997, 715, 535],\n  [1367, 1059, 751, 593],\n  [1465, 1125, 805, 625],\n  [1528, 1190, 868, 658],\n  [1628, 1264, 908, 698],\n  [1732, 1370, 982, 742],\n  [1840, 1452, 1030, 790],\n  [1952, 1538, 1112, 842],\n  [2068, 1628, 1168, 898],\n  [2188, 1722, 1228, 958],\n  [2303, 1809, 1283, 983],\n  [2431, 1911, 1351, 1051],\n  [2563, 1989, 1423, 1093],\n  [2699, 2099, 1499, 1139],\n  [2809, 2213, 1579, 1219],\n  [2953, 2331, 1663, 1273],\n];\n","export const getProp = (object, keys, defaultVal = undefined) => {\n  keys = Array.isArray(keys) ? keys : keys.split('.');\n  object = object[keys[0]];\n  if (object && keys.length > 1) {\n    return getProp(object, keys.slice(1));\n  }\n  return object === undefined ? defaultVal : object;\n};\n\nexport const round = (val: number, precision = 1e1) => {\n  return Math.round(val * precision) / precision;\n};\n\nexport const neighborOffsets = [\n  [-1, 0],\n  [0, -1],\n  [1, 0],\n  [0, 1],\n];\n\nexport const contour = [\n  [\n    [0, 0],\n    [0, 1],\n  ],\n  [\n    [0, 0],\n    [1, 0],\n  ],\n  [\n    [1, 0],\n    [1, 1],\n  ],\n  [\n    [0, 1],\n    [1, 1],\n  ],\n];\n\nexport const getUTF8Length = (content) => {\n  const result = encodeURI(content)\n    .toString()\n    .replace(/%[0-9a-fA-F]{2}/g, 'a');\n  return result.length + (result.length !== content ? 3 : 0);\n};\n","import { QRCodeModel } from './QRCodeModel';\nimport { QRErrorCorrectLevel } from './QRErrorCorrectLevel';\nimport { QRCodeLimitLength } from './QRCodeLimitLength';\nimport { getUTF8Length } from './utils';\n\ntype QRCodeOptions = {\n  ecl: 'L' | 'M' | 'Q' | 'H';\n  content: string;\n};\n\nexport class QRCode {\n  options: QRCodeOptions = {\n    ecl: 'M',\n    content: '',\n  };\n\n  private readonly qrcode!: QRCodeModel;\n\n  constructor(options: Partial<QRCodeOptions>) {\n    for (const i in options) {\n      this.options[i] = options[i];\n    }\n\n    if (this.options.content.length === 0) {\n      throw new Error(\"Expected 'content' to be non-empty!\");\n    }\n\n    const content = this.options.content;\n    const type = this.getTypeNumber(content, this.options.ecl);\n    const ecl = this.getErrorCorrectLevel(this.options.ecl);\n    this.qrcode = new QRCodeModel(type, ecl);\n    this.qrcode.addData(content);\n    this.qrcode.make();\n  }\n\n  private getErrorCorrectLevel(ecl) {\n    const result = QRErrorCorrectLevel[ecl];\n\n    if (result == undefined) {\n      throw new Error('Unknwon error correction level: ' + ecl);\n    }\n\n    return result;\n  }\n\n  private getTypeNumber(content, ecl) {\n    const length = getUTF8Length(content);\n\n    let type = 1;\n    let limit = 0;\n    let i = 0;\n    const len = QRCodeLimitLength.length;\n    for (; i <= len; i++) {\n      const table = QRCodeLimitLength[i];\n      if (!table) {\n        throw new Error('Content too long: expected ' + limit + ' but got ' + length);\n      }\n\n      switch (ecl) {\n        case 'L':\n          limit = table[0];\n          break;\n\n        case 'M':\n          limit = table[1];\n          break;\n\n        case 'Q':\n          limit = table[2];\n          break;\n\n        case 'H':\n          limit = table[3];\n          break;\n\n        default:\n          throw new Error('Unknwon error correction level: ' + ecl);\n      }\n\n      if (length <= limit) {\n        break;\n      }\n\n      type++;\n    }\n\n    if (type > QRCodeLimitLength.length) {\n      throw new Error('Content too long');\n    }\n\n    return type;\n  }\n\n  emptyCenter(emptySize: number, emptySizeHeight?: number) {\n    const { size } = this;\n\n    emptySizeHeight = emptySizeHeight || emptySize;\n\n    const halfSize = size / 2;\n    const halfEmptySize = emptySize / 2;\n    const halfEmptySizeHeight = emptySizeHeight / 2;\n\n    for (let y = 0; y < size; y++) {\n      for (let x = 0; x < size; x++) {\n        if (\n          y >= halfSize - halfEmptySizeHeight &&\n          y < halfSize + halfEmptySizeHeight &&\n          x >= halfSize - halfEmptySize &&\n          x < halfSize + halfEmptySize\n        ) {\n          this.matrix[y][x] = false;\n        }\n\n      }\n    }\n  }\n\n  get matrix() {\n    return this.qrcode.modules;\n  }\n\n  get size() {\n    return this.qrcode.moduleCount;\n  }\n}\n","import { getProp, round, neighborOffsets, contour } from './utils';\nimport { QRCode } from './QRCode';\n\ntype QRSvgOptions = {\n  size: number;\n  radiusFactor: number;\n  cornerBlockRadiusFactor?: number;\n  roundOuterCorners: boolean;\n  roundInnerCorners: boolean;\n  cornerBlocksAsCircles: boolean;\n  fill: string;\n  preContent?: string | ((QRSvg) => string);\n  postContent?: string | ((QRSvg) => string);\n};\n\ntype Pride = 1 | 0;\n\ntype Cell = {\n  pride: Pride;\n  x: number;\n  y: number;\n  blockId?: string;\n  isCornerBlock: boolean;\n};\n\ntype LineSegment = {\n  processed: boolean;\n  p1: { x: number; y: number };\n  p2: { x: number; y: number };\n  cell: Cell;\n  cr: number;\n};\n\ntype LineSegmentsWithCrops = LineSegment[] & { crops?: LineSegment[][] };\n\nconst findNeighbors = (matrix: Cell[][], cell: Cell, pride: Pride, expectCells: Cell[] = []) => {\n  expectCells.push(cell);\n\n  for (const offset of neighborOffsets) {\n    const neighborCoord = { x: cell.x + offset[0], y: cell.y + offset[1] };\n\n    if (!expectCells.find((i) => i.x === neighborCoord.x && i.y === neighborCoord.y)) {\n      const neighborCell = getProp(matrix, [neighborCoord.y, neighborCoord.x]);\n\n      if (neighborCell && neighborCell.pride === pride) {\n        const pride = neighborCell.pride;\n        findNeighbors(matrix, neighborCell, pride, expectCells);\n      }\n    }\n  }\n};\n\nexport class QRSvg {\n  private options: QRSvgOptions = {\n    size: 0,\n    radiusFactor: 0.75,\n    roundOuterCorners: true,\n    roundInnerCorners: true,\n    cornerBlocksAsCircles: false,\n    fill: 'currentColor',\n  };\n\n  private matrix!: Cell[][];\n\n  paths: string[] = [];\n\n  private readonly matrixSize!: number;\n\n  private lines: Record<string, LineSegmentsWithCrops> = {};\n\n  private lastUniqId = 0;\n\n  readonly pointSize!: number;\n\n  constructor(qrCode: QRCode, options: Partial<QRSvgOptions>) {\n    for (const i in options) {\n      this.options[i] = options[i];\n    }\n\n    if (this.options.cornerBlockRadiusFactor === undefined) {\n      this.options.cornerBlockRadiusFactor = this.options.radiusFactor;\n    }\n\n    if (!(this.options.size > 0)) {\n      throw new Error(\"Expected 'size' value to be higher than zero!\");\n    }\n\n    this.matrixSize = qrCode.size;\n    this.pointSize = this.options.size / this.matrixSize;\n\n    this.matrix = (() => {\n      const result: Cell[][] = [];\n      qrCode.matrix.forEach((row, rowIdx) => {\n        result[rowIdx] = [];\n        row.forEach((val, idx) => {\n          result[rowIdx][idx] = {\n            pride: val ? 1 : 0,\n            x: idx,\n            y: rowIdx,\n            blockId: undefined,\n            isCornerBlock: false,\n          } as Cell;\n        });\n      });\n      return result;\n    })();\n\n    this.detectBlocks();\n    this.detectLines();\n    this.generatePaths();\n  }\n\n  private detectBlocks() {\n    const { matrixSize, matrix } = this;\n\n    for (let y = 0; y < matrixSize; y++) {\n      for (let x = 0; x < matrixSize; x++) {\n        const currCell = matrix[y][x];\n        if (currCell.blockId === undefined && currCell.pride === 1) {\n          const cells: Cell[] = [];\n          findNeighbors(matrix, currCell, 1, cells);\n          const blockId = this.getUniqId();\n          cells.forEach((cell) => {\n            const { x, y } = cell;\n            cell.blockId = blockId;\n\n            if ((x < 8 && y < 8) || (x > this.matrixSize - 8 && y < 8) || (x < 8 && y > this.matrixSize - 8)) {\n              cell.isCornerBlock = true;\n            }\n          });\n        }\n      }\n    }\n  }\n\n  private detectLines() {\n    const { lines, matrixSize, matrix } = this;\n\n    const pathRadius = (this.pointSize / 2) * Math.min(this.options.radiusFactor, 10);\n    const cornerBlockPathRadius = (this.pointSize / 2) * Math.min(this.options.cornerBlockRadiusFactor as number, 10);\n\n    for (let y = 0; y < matrixSize; y++) {\n      for (let x = 0; x < matrixSize; x++) {\n        const cell = matrix[y][x];\n        if (cell.blockId === undefined) {\n          continue;\n        }\n\n        if (cell.isCornerBlock && this.options.cornerBlocksAsCircles) {\n          continue;\n        }\n\n        neighborOffsets.forEach((offset, idx) => {\n          const neighborCell = getProp(matrix, [y + offset[0], x + offset[1]]);\n          if (!neighborCell || neighborCell.blockId !== cell.blockId) {\n            if (cell.blockId) {\n              lines[cell.blockId] = lines[cell.blockId] || [];\n              lines[cell.blockId].push({\n                processed: false,\n                p1: { y: y + contour[idx][0][0], x: x + contour[idx][0][1] },\n                p2: { y: y + contour[idx][1][0], x: x + contour[idx][1][1] },\n                cell,\n                cr: cell.isCornerBlock ? cornerBlockPathRadius : pathRadius,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    Object.keys(lines).forEach((key) => {\n      const line = lines[key];\n\n      const proc = (py, px, result, oCell) => {\n        const nextSegs = line\n          .filter((seg) => {\n            if (!seg.processed) {\n              if ((seg.p1.y === py && seg.p1.x === px) || (seg.p2.y === py && seg.p2.x === px)) {\n                return true;\n              }\n            }\n            return false;\n          })\n          .sort((a, b) => {\n            if (a.cell === oCell) {\n              return -1;\n            }\n            return 1;\n          });\n\n        const nextSeg = nextSegs[0];\n\n        if (nextSeg) {\n          nextSeg.processed = true;\n          let resultSeg;\n          if (nextSeg.p1.y === py && nextSeg.p1.x === px) {\n            resultSeg = { p1: nextSeg.p1, p2: nextSeg.p2, cr: nextSeg.cr };\n          } else if (nextSeg.p2.y === py && nextSeg.p2.x === px) {\n            resultSeg = { p1: nextSeg.p2, p2: nextSeg.p1, cr: nextSeg.cr };\n          }\n          result.push(resultSeg);\n          proc(resultSeg.p2.y, resultSeg.p2.x, result, nextSeg.cell);\n        }\n      };\n      line[0].processed = true;\n      const result: LineSegmentsWithCrops = [line[0]];\n      proc(line[0].p2.y, line[0].p2.x, result, line[0].cell);\n      lines[key] = result;\n      lines[key].crops = [];\n\n      let checkCrops = true;\n      while (checkCrops) {\n        const notProcessedSeg = line.find((i) => !i.processed);\n        if (notProcessedSeg) {\n          notProcessedSeg.processed = true;\n          const cropResult = [notProcessedSeg];\n          proc(notProcessedSeg.p2.y, notProcessedSeg.p2.x, cropResult, notProcessedSeg.cell);\n          cropResult.reverse();\n          cropResult.map((seg) => {\n            const op2 = seg.p2;\n            seg.p2 = seg.p1;\n            seg.p1 = op2;\n            return seg;\n          });\n          lines[key]?.crops?.push(cropResult);\n        } else {\n          checkCrops = false;\n        }\n      }\n    });\n  }\n\n  private getDir(seg) {\n    if (seg.p1.x === seg.p2.x) {\n      if (seg.p1.y > seg.p2.y) {\n        return 'sn';\n      }\n      return 'ns';\n    }\n    if (seg.p1.y === seg.p2.y) {\n      if (seg.p1.x > seg.p2.x) {\n        return 'ew';\n      }\n      return 'we';\n    }\n  }\n\n  private getSubPath(seg, prevSeg, roundOuterCorners, roundInnerCorners) {\n    const { pointSize } = this;\n\n    let {\n      p1: { x, y },\n      cr,\n    } = seg;\n\n    x = x * pointSize;\n    y = y * pointSize;\n\n    const xmcr = round(x - cr);\n    const xpcr = round(x + cr);\n\n    const ymcr = round(y - cr);\n    const ypcr = round(y + cr);\n\n    x = round(x);\n    y = round(y);\n\n    const segDir = this.getDir(seg);\n    const prevSegDir = this.getDir(prevSeg);\n\n    let path = '';\n    if (cr && roundOuterCorners && prevSegDir === 'we' && segDir === 'ns') {\n      path += `L${xmcr} ${y} `;\n      path += `Q${x} ${y} ${x} ${ypcr}`;\n    } else if (cr && roundOuterCorners && prevSegDir === 'ns' && segDir === 'ew') {\n      path += `L${x} ${ymcr} `;\n      path += `Q${x} ${y} ${xmcr} ${y}`;\n    } else if (cr && roundOuterCorners && prevSegDir === 'ew' && segDir === 'sn') {\n      path += `L${xpcr} ${y} `;\n      path += `Q${x} ${y} ${x} ${ymcr}`;\n    } else if (cr && roundOuterCorners && prevSegDir === 'sn' && segDir === 'we') {\n      path += `L${x} ${ypcr} `;\n      path += `Q${x} ${y} ${xpcr} ${y}`;\n    } else if (cr && roundInnerCorners && prevSegDir === 'sn' && segDir === 'ew') {\n      path += `L${x} ${ypcr} `;\n      path += `Q${x} ${y} ${xmcr} ${y}`;\n    } else if (cr && roundInnerCorners && prevSegDir === 'ew' && segDir === 'ns') {\n      path += `L${xpcr} ${y} `;\n      path += `Q${x} ${y} ${x} ${ypcr}`;\n    } else if (cr && roundInnerCorners && prevSegDir === 'ns' && segDir === 'we') {\n      path += `L${x} ${ymcr} `;\n      path += `Q${x} ${y} ${xpcr} ${y}`;\n    } else if (cr && roundInnerCorners && prevSegDir === 'we' && segDir === 'sn') {\n      path += `L${xmcr} ${y} `;\n      path += `Q${x} ${y} ${x} ${ymcr}`;\n    } else {\n      path += `L${x} ${y} `;\n    }\n    return path;\n  }\n\n  private getUniqId() {\n    return String(this.lastUniqId++);\n  }\n\n  private generatePaths() {\n    const {\n      pointSize,\n      options: { roundOuterCorners, roundInnerCorners, cornerBlocksAsCircles },\n    } = this;\n\n    const { lines } = this;\n    const paths: string[] = [];\n\n    Object.keys(lines).forEach((key) => {\n      let path = '';\n      for (const [lineIdx, line] of [lines[key], ...(lines[key].crops as LineSegment[][])].entries()) {\n        for (const [segIdx, seg] of line.entries()) {\n          let {\n            p1: { x, y },\n            cr,\n          } = seg;\n\n          x = x * pointSize;\n          y = y * pointSize;\n\n          const xpcr = round(x + cr);\n          const ypcr = round(y + cr);\n\n          x = round(x);\n          y = round(y);\n\n          const prevSeg = line[segIdx - 1] || line[line.length - 1];\n          const nextSeg = line[segIdx + 1] || line[0];\n\n          const segDir = this.getDir(seg);\n          const prevSegDir = this.getDir(prevSeg);\n\n          if (segIdx === 0) {\n            if (roundOuterCorners) {\n              if (lineIdx === 0) {\n                path += `M${xpcr} ${y} `;\n              } else {\n                path += `M${x} ${ypcr} `;\n              }\n            } else {\n              path += `M${x} ${y} `;\n            }\n          } else if (segIdx === line.length - 1) {\n            path += this.getSubPath(seg, prevSeg, roundOuterCorners, roundInnerCorners);\n            path += this.getSubPath(nextSeg, seg, roundOuterCorners, roundInnerCorners);\n            path += 'Z';\n          } else if (prevSegDir !== segDir) {\n            path += this.getSubPath(seg, prevSeg, roundOuterCorners, roundInnerCorners);\n          }\n        }\n      }\n      paths.push(`<path d=\"${path}\"/>`);\n    });\n\n    if (cornerBlocksAsCircles) {\n      const offsetSize = this.pointSize * this.matrixSize - this.pointSize * 7;\n      [\n        [0, 0],\n        [offsetSize, 0],\n        [0, offsetSize],\n      ].forEach(([ox, oy]) => {\n        const centerX = round((this.pointSize * 7) / 2 + ox);\n        const centerY = round((this.pointSize * 7) / 2 + oy);\n\n        let outerRadius = round((this.pointSize * 7) / 2);\n        const innerRadius = round((this.pointSize * 7) / 2 - this.pointSize);\n\n        // Big circle\n        paths.push(`<path d=\"\\\nM ${centerX} ${centerY - outerRadius} \\\nA ${outerRadius} ${outerRadius} 0 1 0 ${centerX} ${round(centerY + outerRadius)} \\\nA ${outerRadius} ${outerRadius} 0 1 0 ${centerX} ${round(centerY - outerRadius)} \\\nZ \\\nM ${centerX} ${centerY - innerRadius} \\\nA ${innerRadius} ${innerRadius} 0 1 1 ${centerX} ${round(centerY + innerRadius)} \\\nA ${innerRadius} ${innerRadius} 0 1 1 ${centerX} ${round(centerY - innerRadius)} \\\nZ\" />`);\n\n        // Small circle\n        outerRadius = round((this.pointSize * 7) / 2 - this.pointSize * 2);\n        paths.push(`<path d=\"\\\nM ${centerX} ${centerY - outerRadius} \\\nA ${outerRadius} ${outerRadius} 0 1 0 ${centerX} ${round(centerY + outerRadius)} \\\nA ${outerRadius} ${outerRadius} 0 1 0 ${centerX} ${round(centerY - outerRadius)} \\\nZ\" />`);\n      });\n    }\n\n    this.paths = paths;\n  }\n\n  private svgAdditionalContent(additionalContent): string {\n    if (typeof additionalContent === 'function') {\n      return additionalContent(this);\n    }\n\n    if (typeof additionalContent === 'string') {\n      return additionalContent;\n    }\n\n    return additionalContent || '';\n  }\n\n  get svg() {\n    const { size, fill } = this.options;\n\n    return `\\\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${size} ${size}\" width=\"${size}\" height=\"${size}\" fill=\"${fill}\">\n${this.svgAdditionalContent(this.options.preContent)}\n${this.paths.join('\\n')}\n${this.svgAdditionalContent(this.options.postContent)}\n</svg>`;\n  }\n}\n"],"mappings":"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,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,MACtB,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,KACpB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,MACtB,CAAC,IAAI,IAAI,KACT,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,IAAI,IAAI,KACT,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,MACtB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,MACtB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,KACpB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,MACtB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,MACvB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,KACpB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,MACtB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,KACpB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,GAAG,KAAK,KAAK,IAAI,KAAK,MACvB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,MACtB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,KACpB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,GAAG,KAAK,KAAK,IAAI,KAAK,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,MACvB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,KAAK,MACV,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,KACpB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,GAAG,KAAK,KAAK,IAAI,KAAK,MACvB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,KACpB,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,MACvB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KACrB,CAAC,IAAI,IAAI,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}