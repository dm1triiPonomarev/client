{"version":3,"file":"index.umd.js","sources":["../src/QR8bitByte.ts","../src/QRMode.ts","../src/QRErrorCorrectLevel.ts","../src/QRRSBlock.ts","../src/QRBitBuffer.ts","../src/QRMath.ts","../src/QRPolynomial.ts","../src/QRUtil.ts","../src/QRMaskPattern.ts","../src/QRCodeModel.ts","../src/QRCodeLimitLength.ts","../src/utils.ts","../src/QRCode.ts","../src/QRSvg.ts"],"sourcesContent":["import { QRMode } from './QRMode';\n\nexport class QR8bitByte {\n  mode = QRMode.MODE_8BIT_BYTE;\n\n  data: string;\n\n  parsedData: (number[] | number)[] = [];\n\n  constructor(data) {\n    this.data = data;\n\n    // Added to support UTF-8 Characters\n    let i = 0;\n    const l = this.data.length;\n    for (; i < l; i++) {\n      const code = this.data.charCodeAt(i);\n\n      let byteArray: number[];\n      if (code > 0x10000) {\n        // prettier-ignore\n        byteArray = [\n          0xf0 | ((code & 0x1c0000) >>> 18),\n          0x80 | ((code & 0x3f000) >>> 12),\n          0x80 | ((code & 0xfc0) >>> 6),\n          0x80 | (code & 0x3f),\n        ];\n      } else if (code > 0x800) {\n        // prettier-ignore\n        byteArray = [\n          0xe0 | ((code & 0xf000) >>> 12),\n          0x80 | ((code & 0xfc0) >>> 6),\n          0x80 | (code & 0x3f),\n        ]\n      } else if (code > 0x80) {\n        // prettier-ignore\n        byteArray = [\n          0xc0 | ((code & 0x7c0) >>> 6),\n          0x80 | (code & 0x3f),\n        ]\n      } else {\n        byteArray = [code];\n      }\n\n      this.parsedData.push(byteArray);\n    }\n\n    this.parsedData = Array.prototype.concat.apply([], this.parsedData);\n\n    if (this.parsedData.length !== this.data.length) {\n      this.parsedData.unshift(191);\n      this.parsedData.unshift(187);\n      this.parsedData.unshift(239);\n    }\n  }\n\n  getLength() {\n    return this.parsedData.length;\n  }\n\n  write(buffer) {\n    let i = 0;\n    const l = this.parsedData.length;\n    for (; i < l; i++) {\n      buffer.put(this.parsedData[i], 8);\n    }\n  }\n}\n","export const QRMode = {\n  MODE_NUMBER: 1 << 0,\n  MODE_ALPHA_NUM: 1 << 1,\n  MODE_8BIT_BYTE: 1 << 2,\n  MODE_KANJI: 1 << 3,\n};\n\nexport type QRMode = typeof QRMode[keyof typeof QRMode];\n","export const QRErrorCorrectLevel = {\n  L: 1,\n  M: 0,\n  Q: 3,\n  H: 2,\n};\n\nexport type QRErrorCorrectLevel = typeof QRErrorCorrectLevel[keyof typeof QRErrorCorrectLevel];\n","import { QRErrorCorrectLevel } from './QRErrorCorrectLevel';\n\nexport class QRRSBlock {\n  totalCount!: number;\n  dataCount!: number;\n\n  constructor(totalCount, dataCount) {\n    this.totalCount = totalCount;\n    this.dataCount = dataCount;\n  }\n\n  static RS_BLOCK_TABLE = [\n    [1, 26, 19],\n    [1, 26, 16],\n    [1, 26, 13],\n    [1, 26, 9],\n    [1, 44, 34],\n    [1, 44, 28],\n    [1, 44, 22],\n    [1, 44, 16],\n    [1, 70, 55],\n    [1, 70, 44],\n    [2, 35, 17],\n    [2, 35, 13],\n    [1, 100, 80],\n    [2, 50, 32],\n    [2, 50, 24],\n    [4, 25, 9],\n    [1, 134, 108],\n    [2, 67, 43],\n    [2, 33, 15, 2, 34, 16],\n    [2, 33, 11, 2, 34, 12],\n    [2, 86, 68],\n    [4, 43, 27],\n    [4, 43, 19],\n    [4, 43, 15],\n    [2, 98, 78],\n    [4, 49, 31],\n    [2, 32, 14, 4, 33, 15],\n    [4, 39, 13, 1, 40, 14],\n    [2, 121, 97],\n    [2, 60, 38, 2, 61, 39],\n    [4, 40, 18, 2, 41, 19],\n    [4, 40, 14, 2, 41, 15],\n    [2, 146, 116],\n    [3, 58, 36, 2, 59, 37],\n    [4, 36, 16, 4, 37, 17],\n    [4, 36, 12, 4, 37, 13],\n    [2, 86, 68, 2, 87, 69],\n    [4, 69, 43, 1, 70, 44],\n    [6, 43, 19, 2, 44, 20],\n    [6, 43, 15, 2, 44, 16],\n    [4, 101, 81],\n    [1, 80, 50, 4, 81, 51],\n    [4, 50, 22, 4, 51, 23],\n    [3, 36, 12, 8, 37, 13],\n    [2, 116, 92, 2, 117, 93],\n    [6, 58, 36, 2, 59, 37],\n    [4, 46, 20, 6, 47, 21],\n    [7, 42, 14, 4, 43, 15],\n    [4, 133, 107],\n    [8, 59, 37, 1, 60, 38],\n    [8, 44, 20, 4, 45, 21],\n    [12, 33, 11, 4, 34, 12],\n    [3, 145, 115, 1, 146, 116],\n    [4, 64, 40, 5, 65, 41],\n    [11, 36, 16, 5, 37, 17],\n    [11, 36, 12, 5, 37, 13],\n    [5, 109, 87, 1, 110, 88],\n    [5, 65, 41, 5, 66, 42],\n    [5, 54, 24, 7, 55, 25],\n    [11, 36, 12],\n    [5, 122, 98, 1, 123, 99],\n    [7, 73, 45, 3, 74, 46],\n    [15, 43, 19, 2, 44, 20],\n    [3, 45, 15, 13, 46, 16],\n    [1, 135, 107, 5, 136, 108],\n    [10, 74, 46, 1, 75, 47],\n    [1, 50, 22, 15, 51, 23],\n    [2, 42, 14, 17, 43, 15],\n    [5, 150, 120, 1, 151, 121],\n    [9, 69, 43, 4, 70, 44],\n    [17, 50, 22, 1, 51, 23],\n    [2, 42, 14, 19, 43, 15],\n    [3, 141, 113, 4, 142, 114],\n    [3, 70, 44, 11, 71, 45],\n    [17, 47, 21, 4, 48, 22],\n    [9, 39, 13, 16, 40, 14],\n    [3, 135, 107, 5, 136, 108],\n    [3, 67, 41, 13, 68, 42],\n    [15, 54, 24, 5, 55, 25],\n    [15, 43, 15, 10, 44, 16],\n    [4, 144, 116, 4, 145, 117],\n    [17, 68, 42],\n    [17, 50, 22, 6, 51, 23],\n    [19, 46, 16, 6, 47, 17],\n    [2, 139, 111, 7, 140, 112],\n    [17, 74, 46],\n    [7, 54, 24, 16, 55, 25],\n    [34, 37, 13],\n    [4, 151, 121, 5, 152, 122],\n    [4, 75, 47, 14, 76, 48],\n    [11, 54, 24, 14, 55, 25],\n    [16, 45, 15, 14, 46, 16],\n    [6, 147, 117, 4, 148, 118],\n    [6, 73, 45, 14, 74, 46],\n    [11, 54, 24, 16, 55, 25],\n    [30, 46, 16, 2, 47, 17],\n    [8, 132, 106, 4, 133, 107],\n    [8, 75, 47, 13, 76, 48],\n    [7, 54, 24, 22, 55, 25],\n    [22, 45, 15, 13, 46, 16],\n    [10, 142, 114, 2, 143, 115],\n    [19, 74, 46, 4, 75, 47],\n    [28, 50, 22, 6, 51, 23],\n    [33, 46, 16, 4, 47, 17],\n    [8, 152, 122, 4, 153, 123],\n    [22, 73, 45, 3, 74, 46],\n    [8, 53, 23, 26, 54, 24],\n    [12, 45, 15, 28, 46, 16],\n    [3, 147, 117, 10, 148, 118],\n    [3, 73, 45, 23, 74, 46],\n    [4, 54, 24, 31, 55, 25],\n    [11, 45, 15, 31, 46, 16],\n    [7, 146, 116, 7, 147, 117],\n    [21, 73, 45, 7, 74, 46],\n    [1, 53, 23, 37, 54, 24],\n    [19, 45, 15, 26, 46, 16],\n    [5, 145, 115, 10, 146, 116],\n    [19, 75, 47, 10, 76, 48],\n    [15, 54, 24, 25, 55, 25],\n    [23, 45, 15, 25, 46, 16],\n    [13, 145, 115, 3, 146, 116],\n    [2, 74, 46, 29, 75, 47],\n    [42, 54, 24, 1, 55, 25],\n    [23, 45, 15, 28, 46, 16],\n    [17, 145, 115],\n    [10, 74, 46, 23, 75, 47],\n    [10, 54, 24, 35, 55, 25],\n    [19, 45, 15, 35, 46, 16],\n    [17, 145, 115, 1, 146, 116],\n    [14, 74, 46, 21, 75, 47],\n    [29, 54, 24, 19, 55, 25],\n    [11, 45, 15, 46, 46, 16],\n    [13, 145, 115, 6, 146, 116],\n    [14, 74, 46, 23, 75, 47],\n    [44, 54, 24, 7, 55, 25],\n    [59, 46, 16, 1, 47, 17],\n    [12, 151, 121, 7, 152, 122],\n    [12, 75, 47, 26, 76, 48],\n    [39, 54, 24, 14, 55, 25],\n    [22, 45, 15, 41, 46, 16],\n    [6, 151, 121, 14, 152, 122],\n    [6, 75, 47, 34, 76, 48],\n    [46, 54, 24, 10, 55, 25],\n    [2, 45, 15, 64, 46, 16],\n    [17, 152, 122, 4, 153, 123],\n    [29, 74, 46, 14, 75, 47],\n    [49, 54, 24, 10, 55, 25],\n    [24, 45, 15, 46, 46, 16],\n    [4, 152, 122, 18, 153, 123],\n    [13, 74, 46, 32, 75, 47],\n    [48, 54, 24, 14, 55, 25],\n    [42, 45, 15, 32, 46, 16],\n    [20, 147, 117, 4, 148, 118],\n    [40, 75, 47, 7, 76, 48],\n    [43, 54, 24, 22, 55, 25],\n    [10, 45, 15, 67, 46, 16],\n    [19, 148, 118, 6, 149, 119],\n    [18, 75, 47, 31, 76, 48],\n    [34, 54, 24, 34, 55, 25],\n    [20, 45, 15, 61, 46, 16],\n  ];\n\n  static getRSBlocks(typeNumber, errorCorrectLevel) {\n    const rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n    if (rsBlock === undefined) {\n      throw new Error('bad rs block @ typeNumber:' + typeNumber + '/errorCorrectLevel:' + errorCorrectLevel);\n    }\n    const length = rsBlock.length / 3;\n    const list: QRRSBlock[] = [];\n    for (let i = 0; i < length; i++) {\n      const count = rsBlock[i * 3];\n      const totalCount = rsBlock[i * 3 + 1];\n      const dataCount = rsBlock[i * 3 + 2];\n      for (let j = 0; j < count; j++) {\n        list.push(new QRRSBlock(totalCount, dataCount));\n      }\n    }\n    return list;\n  }\n\n  static getRsBlockTable(typeNumber, errorCorrectLevel) {\n    switch (errorCorrectLevel) {\n      case QRErrorCorrectLevel.L:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4];\n      case QRErrorCorrectLevel.M:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n      case QRErrorCorrectLevel.Q:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n      case QRErrorCorrectLevel.H:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n      default:\n        return undefined;\n    }\n  }\n}\n","export class QRBitBuffer {\n  buffer: number[] = [];\n\n  length = 0;\n\n  constructor() {}\n\n  get(index) {\n    const bufIndex = Math.floor(index / 8);\n    return ((this.buffer[bufIndex] >>> (7 - (index % 8))) & 1) === 1;\n  }\n\n  put(num, length) {\n    for (let i = 0; i < length; i++) {\n      this.putBit(((num >>> (length - i - 1)) & 1) === 1);\n    }\n  }\n\n  getLengthInBits() {\n    return this.length;\n  }\n\n  putBit(bit) {\n    const bufIndex = Math.floor(this.length / 8);\n    if (this.buffer.length <= bufIndex) {\n      this.buffer.push(0);\n    }\n    if (bit) {\n      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n    }\n    this.length++;\n  }\n}\n","export const [EXP_TABLE, LOG_TABLE] = (() => {\n  const EXP_TABLE = new Array(256);\n  const LOG_TABLE = new Array(256);\n\n  for (let i = 0; i < 8; i++) {\n    EXP_TABLE[i] = 1 << i;\n  }\n  for (let i = 8; i < 256; i++) {\n    EXP_TABLE[i] = EXP_TABLE[i - 4] ^ EXP_TABLE[i - 5] ^ EXP_TABLE[i - 6] ^ EXP_TABLE[i - 8];\n  }\n  for (let i = 0; i < 255; i++) {\n    LOG_TABLE[EXP_TABLE[i]] = i;\n  }\n\n  return [EXP_TABLE, LOG_TABLE];\n})();\n\nexport const glog = (n) => {\n  if (n < 1) {\n    throw new Error('glog(' + n + ')');\n  }\n  return LOG_TABLE[n];\n};\n\nexport const gexp = (n) => {\n  while (n < 0) {\n    n += 255;\n  }\n  while (n >= 256) {\n    n -= 255;\n  }\n  return EXP_TABLE[n];\n};\n","import * as QRMath from './QRMath';\n\nexport class QRPolynomial {\n  num: number[];\n\n  constructor(num, shift) {\n    if (num.length === undefined) {\n      throw new Error(num.length + '/' + shift);\n    }\n    let offset = 0;\n    while (offset < num.length && num[offset] === 0) {\n      offset++;\n    }\n    this.num = new Array(num.length - offset + shift);\n    for (let i = 0; i < num.length - offset; i++) {\n      this.num[i] = num[i + offset];\n    }\n  }\n\n  get(index) {\n    return this.num[index];\n  }\n\n  getLength() {\n    return this.num.length;\n  }\n\n  multiply(e) {\n    const num = new Array(this.getLength() + e.getLength() - 1);\n    for (let i = 0; i < this.getLength(); i++) {\n      for (let j = 0; j < e.getLength(); j++) {\n        num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));\n      }\n    }\n    return new QRPolynomial(num, 0);\n  }\n\n  mod(e) {\n    if (this.getLength() - e.getLength() < 0) {\n      return this;\n    }\n    const ratio = QRMath.glog(this.get(0)) - QRMath.glog(e.get(0));\n    const num = new Array(this.getLength());\n    for (let i = 0; i < this.getLength(); i++) {\n      num[i] = this.get(i);\n    }\n    for (let i = 0; i < e.getLength(); i++) {\n      num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);\n    }\n    return new QRPolynomial(num, 0).mod(e);\n  }\n}\n","import { QRMaskPattern } from './QRMaskPattern';\nimport { QRPolynomial } from './QRPolynomial';\nimport { QRMode } from './QRMode';\nimport * as QRMath from './QRMath';\n\nexport const PATTERN_POSITION_TABLE = [\n  [],\n  [6, 18],\n  [6, 22],\n  [6, 26],\n  [6, 30],\n  [6, 34],\n  [6, 22, 38],\n  [6, 24, 42],\n  [6, 26, 46],\n  [6, 28, 50],\n  [6, 30, 54],\n  [6, 32, 58],\n  [6, 34, 62],\n  [6, 26, 46, 66],\n  [6, 26, 48, 70],\n  [6, 26, 50, 74],\n  [6, 30, 54, 78],\n  [6, 30, 56, 82],\n  [6, 30, 58, 86],\n  [6, 34, 62, 90],\n  [6, 28, 50, 72, 94],\n  [6, 26, 50, 74, 98],\n  [6, 30, 54, 78, 102],\n  [6, 28, 54, 80, 106],\n  [6, 32, 58, 84, 110],\n  [6, 30, 58, 86, 114],\n  [6, 34, 62, 90, 118],\n  [6, 26, 50, 74, 98, 122],\n  [6, 30, 54, 78, 102, 126],\n  [6, 26, 52, 78, 104, 130],\n  [6, 30, 56, 82, 108, 134],\n  [6, 34, 60, 86, 112, 138],\n  [6, 30, 58, 86, 114, 142],\n  [6, 34, 62, 90, 118, 146],\n  [6, 30, 54, 78, 102, 126, 150],\n  [6, 24, 50, 76, 102, 128, 154],\n  [6, 28, 54, 80, 106, 132, 158],\n  [6, 32, 58, 84, 110, 136, 162],\n  [6, 26, 54, 82, 110, 138, 166],\n  [6, 30, 58, 86, 114, 142, 170],\n];\n\nexport const G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);\n\nexport const G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);\n\nexport const G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);\n\nexport const getBCHDigit = (data) => {\n  let digit = 0;\n  while (data !== 0) {\n    digit++;\n    data >>>= 1;\n  }\n  return digit;\n};\n\nexport const getBCHTypeInfo = (data) => {\n  let d = data << 10;\n  while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n    d ^= G15 << (getBCHDigit(d) - getBCHDigit(G15));\n  }\n  return ((data << 10) | d) ^ G15_MASK;\n};\n\nexport const getBCHTypeNumber = (data) => {\n  let d = data << 12;\n  while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n    d ^= G18 << (getBCHDigit(d) - getBCHDigit(G18));\n  }\n  return (data << 12) | d;\n};\n\nexport const getPatternPosition = (typeNumber) => {\n  return PATTERN_POSITION_TABLE[typeNumber - 1];\n};\n\nexport const getMask = (maskPattern, i, j) => {\n  switch (maskPattern) {\n    case QRMaskPattern.PATTERN000:\n      return (i + j) % 2 === 0;\n    case QRMaskPattern.PATTERN001:\n      return i % 2 === 0;\n    case QRMaskPattern.PATTERN010:\n      return j % 3 === 0;\n    case QRMaskPattern.PATTERN011:\n      return (i + j) % 3 === 0;\n    case QRMaskPattern.PATTERN100:\n      return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;\n    case QRMaskPattern.PATTERN101:\n      return ((i * j) % 2) + ((i * j) % 3) === 0;\n    case QRMaskPattern.PATTERN110:\n      return (((i * j) % 2) + ((i * j) % 3)) % 2 === 0;\n    case QRMaskPattern.PATTERN111:\n      return (((i * j) % 3) + ((i + j) % 2)) % 2 === 0;\n    default:\n      throw new Error('bad maskPattern:' + maskPattern);\n  }\n};\n\nexport const getErrorCorrectPolynomial = (errorCorrectLength) => {\n  let a = new QRPolynomial([1], 0);\n  for (let i = 0; i < errorCorrectLength; i++) {\n    a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));\n  }\n  return a;\n};\n\nexport const getLengthInBits = (mode, type) => {\n  if (1 <= type && type < 10) {\n    switch (mode) {\n      case QRMode.MODE_NUMBER:\n        return 10;\n      case QRMode.MODE_ALPHA_NUM:\n        return 9;\n      case QRMode.MODE_8BIT_BYTE:\n        return 8;\n      case QRMode.MODE_KANJI:\n        return 8;\n      default:\n        throw new Error('mode:' + mode);\n    }\n  } else if (type < 27) {\n    switch (mode) {\n      case QRMode.MODE_NUMBER:\n        return 12;\n      case QRMode.MODE_ALPHA_NUM:\n        return 11;\n      case QRMode.MODE_8BIT_BYTE:\n        return 16;\n      case QRMode.MODE_KANJI:\n        return 10;\n      default:\n        throw new Error('mode:' + mode);\n    }\n  } else if (type < 41) {\n    switch (mode) {\n      case QRMode.MODE_NUMBER:\n        return 14;\n      case QRMode.MODE_ALPHA_NUM:\n        return 13;\n      case QRMode.MODE_8BIT_BYTE:\n        return 16;\n      case QRMode.MODE_KANJI:\n        return 12;\n      default:\n        throw new Error('mode:' + mode);\n    }\n  } else {\n    throw new Error('type:' + type);\n  }\n};\n\nexport const getLostPoint = (qrCode) => {\n  const moduleCount = qrCode.getModuleCount();\n  let lostPoint = 0;\n  for (let row = 0; row < moduleCount; row++) {\n    for (let col = 0; col < moduleCount; col++) {\n      let sameCount = 0;\n      const dark = qrCode.isDark(row, col);\n      for (let r = -1; r <= 1; r++) {\n        if (row + r < 0 || moduleCount <= row + r) {\n          continue;\n        }\n        for (let c = -1; c <= 1; c++) {\n          if (col + c < 0 || moduleCount <= col + c) {\n            continue;\n          }\n          if (r === 0 && c === 0) {\n            continue;\n          }\n          if (dark === qrCode.isDark(row + r, col + c)) {\n            sameCount++;\n          }\n        }\n      }\n      if (sameCount > 5) {\n        lostPoint += 3 + sameCount - 5;\n      }\n    }\n  }\n  for (let row = 0; row < moduleCount - 1; row++) {\n    for (let col = 0; col < moduleCount - 1; col++) {\n      let count = 0;\n      if (qrCode.isDark(row, col)) count++;\n      if (qrCode.isDark(row + 1, col)) count++;\n      if (qrCode.isDark(row, col + 1)) count++;\n      if (qrCode.isDark(row + 1, col + 1)) count++;\n      if (count === 0 || count === 4) {\n        lostPoint += 3;\n      }\n    }\n  }\n  for (let row = 0; row < moduleCount; row++) {\n    for (let col = 0; col < moduleCount - 6; col++) {\n      if (\n        qrCode.isDark(row, col) &&\n        !qrCode.isDark(row, col + 1) &&\n        qrCode.isDark(row, col + 2) &&\n        qrCode.isDark(row, col + 3) &&\n        qrCode.isDark(row, col + 4) &&\n        !qrCode.isDark(row, col + 5) &&\n        qrCode.isDark(row, col + 6)\n      ) {\n        lostPoint += 40;\n      }\n    }\n  }\n  for (let col = 0; col < moduleCount; col++) {\n    for (let row = 0; row < moduleCount - 6; row++) {\n      if (\n        qrCode.isDark(row, col) &&\n        !qrCode.isDark(row + 1, col) &&\n        qrCode.isDark(row + 2, col) &&\n        qrCode.isDark(row + 3, col) &&\n        qrCode.isDark(row + 4, col) &&\n        !qrCode.isDark(row + 5, col) &&\n        qrCode.isDark(row + 6, col)\n      ) {\n        lostPoint += 40;\n      }\n    }\n  }\n  let darkCount = 0;\n  for (let col = 0; col < moduleCount; col++) {\n    for (let row = 0; row < moduleCount; row++) {\n      if (qrCode.isDark(row, col)) {\n        darkCount++;\n      }\n    }\n  }\n  const ratio = Math.abs((100 * darkCount) / moduleCount / moduleCount - 50) / 5;\n  lostPoint += ratio * 10;\n  return lostPoint;\n};\n","export const QRMaskPattern = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7,\n};\n\nexport type QRMaskPattern = typeof QRMaskPattern[keyof typeof QRMaskPattern];\n","import { QR8bitByte } from './QR8bitByte';\nimport { QRRSBlock } from './QRRSBlock';\nimport { QRBitBuffer } from './QRBitBuffer';\nimport { QRPolynomial } from './QRPolynomial';\nimport * as QRUtil from './QRUtil';\n\nconst PAD0 = 0xec;\nconst PAD1 = 0x11;\n\nexport class QRCodeModel {\n  typeNumber!: number;\n  errorCorrectLevel!: number;\n  modules: (boolean | null)[][] = [];\n  moduleCount = 0;\n  dataCache: number[] | null = null;\n  dataList: QR8bitByte[] = [];\n\n  constructor(typeNumber, errorCorrectLevel) {\n    this.typeNumber = typeNumber;\n    this.errorCorrectLevel = errorCorrectLevel;\n  }\n\n  addData(data) {\n    const newData = new QR8bitByte(data);\n    this.dataList.push(newData);\n    this.dataCache = null;\n  }\n\n  isDark(row, col) {\n    if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n      throw new Error(row + ',' + col);\n    }\n    return this.modules[row][col];\n  }\n\n  getModuleCount() {\n    return this.moduleCount;\n  }\n\n  make() {\n    this.makeImpl(false, this.getBestMaskPattern());\n  }\n\n  makeImpl(test, maskPattern) {\n    this.moduleCount = this.typeNumber * 4 + 17;\n    this.modules = new Array(this.moduleCount);\n    for (let row = 0; row < this.moduleCount; row++) {\n      this.modules[row] = new Array(this.moduleCount);\n      for (let col = 0; col < this.moduleCount; col++) {\n        this.modules[row][col] = null;\n      }\n    }\n    this.setupPositionProbePattern(0, 0);\n    this.setupPositionProbePattern(this.moduleCount - 7, 0);\n    this.setupPositionProbePattern(0, this.moduleCount - 7);\n    this.setupPositionAdjustPattern();\n    this.setupTimingPattern();\n    this.setupTypeInfo(test, maskPattern);\n    if (this.typeNumber >= 7) {\n      this.setupTypeNumber(test);\n    }\n    if (this.dataCache == null) {\n      this.dataCache = this.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n    }\n    this.mapData(this.dataCache, maskPattern);\n  }\n\n  setupPositionProbePattern(row, col) {\n    for (let r = -1; r <= 7; r++) {\n      if (row + r <= -1 || this.moduleCount <= row + r) continue;\n      for (let c = -1; c <= 7; c++) {\n        if (col + c <= -1 || this.moduleCount <= col + c) continue;\n        this.modules[row + r][col + c] =\n          (0 <= r && r <= 6 && (c === 0 || c === 6)) ||\n          (0 <= c && c <= 6 && (r === 0 || r === 6)) ||\n          (2 <= r && r <= 4 && 2 <= c && c <= 4);\n      }\n    }\n  }\n\n  getBestMaskPattern() {\n    let minLostPoint = 0;\n    let pattern = 0;\n    for (let i = 0; i < 8; i++) {\n      this.makeImpl(true, i);\n      const lostPoint = QRUtil.getLostPoint(this);\n      if (i === 0 || minLostPoint > lostPoint) {\n        minLostPoint = lostPoint;\n        pattern = i;\n      }\n    }\n    return pattern;\n  }\n\n  createMovieClip(target_mc, instance_name, depth) {\n    const qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n    const cs = 1;\n    this.make();\n    for (let row = 0; row < this.modules.length; row++) {\n      const y = row * cs;\n      for (let col = 0; col < this.modules[row].length; col++) {\n        const x = col * cs;\n        const dark = this.modules[row][col];\n        if (dark) {\n          qr_mc.beginFill(0, 100);\n          qr_mc.moveTo(x, y);\n          qr_mc.lineTo(x + cs, y);\n          qr_mc.lineTo(x + cs, y + cs);\n          qr_mc.lineTo(x, y + cs);\n          qr_mc.endFill();\n        }\n      }\n    }\n    return qr_mc;\n  }\n\n  setupTimingPattern() {\n    for (let r = 8; r < this.moduleCount - 8; r++) {\n      if (this.modules[r][6] != null) {\n        continue;\n      }\n      this.modules[r][6] = r % 2 === 0;\n    }\n    for (let c = 8; c < this.moduleCount - 8; c++) {\n      if (this.modules[6][c] != null) {\n        continue;\n      }\n      this.modules[6][c] = c % 2 === 0;\n    }\n  }\n\n  setupPositionAdjustPattern() {\n    const pos = QRUtil.getPatternPosition(this.typeNumber);\n    for (let i = 0; i < pos.length; i++) {\n      for (let j = 0; j < pos.length; j++) {\n        const row = pos[i];\n        const col = pos[j];\n        if (this.modules[row][col] != null) {\n          continue;\n        }\n        for (let r = -2; r <= 2; r++) {\n          for (let c = -2; c <= 2; c++) {\n            if (r === -2 || r === 2 || c === -2 || c === 2 || (r === 0 && c === 0)) {\n              this.modules[row + r][col + c] = true;\n            } else {\n              this.modules[row + r][col + c] = false;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  setupTypeNumber(test) {\n    const bits = QRUtil.getBCHTypeNumber(this.typeNumber);\n    for (let i = 0; i < 18; i++) {\n      this.modules[Math.floor(i / 3)][(i % 3) + this.moduleCount - 8 - 3] = !test && ((bits >> i) & 1) === 1;\n    }\n    for (let i = 0; i < 18; i++) {\n      this.modules[(i % 3) + this.moduleCount - 8 - 3][Math.floor(i / 3)] = !test && ((bits >> i) & 1) === 1;\n    }\n  }\n\n  setupTypeInfo(test, maskPattern) {\n    const data = (this.errorCorrectLevel << 3) | maskPattern;\n    const bits = QRUtil.getBCHTypeInfo(data);\n    for (let i = 0; i < 15; i++) {\n      const mod = !test && ((bits >> i) & 1) === 1;\n      if (i < 6) {\n        this.modules[i][8] = mod;\n      } else if (i < 8) {\n        this.modules[i + 1][8] = mod;\n      } else {\n        this.modules[this.moduleCount - 15 + i][8] = mod;\n      }\n    }\n    for (let i = 0; i < 15; i++) {\n      const mod = !test && ((bits >> i) & 1) === 1;\n      if (i < 8) {\n        this.modules[8][this.moduleCount - i - 1] = mod;\n      } else if (i < 9) {\n        this.modules[8][15 - i - 1 + 1] = mod;\n      } else {\n        this.modules[8][15 - i - 1] = mod;\n      }\n    }\n    this.modules[this.moduleCount - 8][8] = !test;\n  }\n\n  mapData(data, maskPattern) {\n    let inc = -1;\n    let row = this.moduleCount - 1;\n    let bitIndex = 7;\n    let byteIndex = 0;\n    for (let col = this.moduleCount - 1; col > 0; col -= 2) {\n      if (col === 6) col--;\n      while (true) {\n        for (let c = 0; c < 2; c++) {\n          if (this.modules[row][col - c] == null) {\n            let dark = false;\n            if (byteIndex < data.length) {\n              dark = ((data[byteIndex] >>> bitIndex) & 1) === 1;\n            }\n            const mask = QRUtil.getMask(maskPattern, row, col - c);\n            if (mask) {\n              dark = !dark;\n            }\n            this.modules[row][col - c] = dark;\n            bitIndex--;\n            if (bitIndex === -1) {\n              byteIndex++;\n              bitIndex = 7;\n            }\n          }\n        }\n        row += inc;\n        if (row < 0 || this.moduleCount <= row) {\n          row -= inc;\n          inc = -inc;\n          break;\n        }\n      }\n    }\n  }\n\n  createData(typeNumber, errorCorrectLevel, dataList) {\n    const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n    const buffer = new QRBitBuffer();\n    for (let i = 0; i < dataList.length; i++) {\n      const data = dataList[i];\n      buffer.put(data.mode, 4);\n      buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));\n      data.write(buffer);\n    }\n    let totalDataCount = 0;\n    for (let i = 0; i < rsBlocks.length; i++) {\n      totalDataCount += rsBlocks[i].dataCount;\n    }\n    if (buffer.getLengthInBits() > totalDataCount * 8) {\n      throw new Error('code length overflow. (' + buffer.getLengthInBits() + '>' + totalDataCount * 8 + ')');\n    }\n    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n      buffer.put(0, 4);\n    }\n    while (buffer.getLengthInBits() % 8 !== 0) {\n      buffer.putBit(false);\n    }\n    while (true) {\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(PAD0, 8);\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(PAD1, 8);\n    }\n    return this.createBytes(buffer, rsBlocks);\n  }\n\n  createBytes(buffer, rsBlocks) {\n    let offset = 0;\n    let maxDcCount = 0;\n    let maxEcCount = 0;\n    const dcdata = new Array(rsBlocks.length);\n    const ecdata = new Array(rsBlocks.length);\n    for (let r = 0; r < rsBlocks.length; r++) {\n      const dcCount = rsBlocks[r].dataCount;\n      const ecCount = rsBlocks[r].totalCount - dcCount;\n      maxDcCount = Math.max(maxDcCount, dcCount);\n      maxEcCount = Math.max(maxEcCount, ecCount);\n      dcdata[r] = new Array(dcCount);\n      for (let i = 0; i < dcdata[r].length; i++) {\n        dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n      }\n      offset += dcCount;\n      const rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n      const rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);\n      const modPoly = rawPoly.mod(rsPoly);\n      ecdata[r] = new Array(rsPoly.getLength() - 1);\n      for (let i = 0; i < ecdata[r].length; i++) {\n        const modIndex = i + modPoly.getLength() - ecdata[r].length;\n        ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n      }\n    }\n    let totalCodeCount = 0;\n    for (let i = 0; i < rsBlocks.length; i++) {\n      totalCodeCount += rsBlocks[i].totalCount;\n    }\n    const data = new Array(totalCodeCount);\n    let index = 0;\n    for (let i = 0; i < maxDcCount; i++) {\n      for (let r = 0; r < rsBlocks.length; r++) {\n        if (i < dcdata[r].length) {\n          data[index++] = dcdata[r][i];\n        }\n      }\n    }\n    for (let i = 0; i < maxEcCount; i++) {\n      for (let r = 0; r < rsBlocks.length; r++) {\n        if (i < ecdata[r].length) {\n          data[index++] = ecdata[r][i];\n        }\n      }\n    }\n    return data;\n  }\n}\n","export const QRCodeLimitLength = [\n  [17, 14, 11, 7],\n  [32, 26, 20, 14],\n  [53, 42, 32, 24],\n  [78, 62, 46, 34],\n  [106, 84, 60, 44],\n  [134, 106, 74, 58],\n  [154, 122, 86, 64],\n  [192, 152, 108, 84],\n  [230, 180, 130, 98],\n  [271, 213, 151, 119],\n  [321, 251, 177, 137],\n  [367, 287, 203, 155],\n  [425, 331, 241, 177],\n  [458, 362, 258, 194],\n  [520, 412, 292, 220],\n  [586, 450, 322, 250],\n  [644, 504, 364, 280],\n  [718, 560, 394, 310],\n  [792, 624, 442, 338],\n  [858, 666, 482, 382],\n  [929, 711, 509, 403],\n  [1003, 779, 565, 439],\n  [1091, 857, 611, 461],\n  [1171, 911, 661, 511],\n  [1273, 997, 715, 535],\n  [1367, 1059, 751, 593],\n  [1465, 1125, 805, 625],\n  [1528, 1190, 868, 658],\n  [1628, 1264, 908, 698],\n  [1732, 1370, 982, 742],\n  [1840, 1452, 1030, 790],\n  [1952, 1538, 1112, 842],\n  [2068, 1628, 1168, 898],\n  [2188, 1722, 1228, 958],\n  [2303, 1809, 1283, 983],\n  [2431, 1911, 1351, 1051],\n  [2563, 1989, 1423, 1093],\n  [2699, 2099, 1499, 1139],\n  [2809, 2213, 1579, 1219],\n  [2953, 2331, 1663, 1273],\n];\n","export const getProp = (object, keys, defaultVal = undefined) => {\n  keys = Array.isArray(keys) ? keys : keys.split('.');\n  object = object[keys[0]];\n  if (object && keys.length > 1) {\n    return getProp(object, keys.slice(1));\n  }\n  return object === undefined ? defaultVal : object;\n};\n\nexport const round = (val: number, precision = 1e1) => {\n  return Math.round(val * precision) / precision;\n};\n\nexport const neighborOffsets = [\n  [-1, 0],\n  [0, -1],\n  [1, 0],\n  [0, 1],\n];\n\nexport const contour = [\n  [\n    [0, 0],\n    [0, 1],\n  ],\n  [\n    [0, 0],\n    [1, 0],\n  ],\n  [\n    [1, 0],\n    [1, 1],\n  ],\n  [\n    [0, 1],\n    [1, 1],\n  ],\n];\n\nexport const getUTF8Length = (content) => {\n  const result = encodeURI(content)\n    .toString()\n    .replace(/%[0-9a-fA-F]{2}/g, 'a');\n  return result.length + (result.length !== content ? 3 : 0);\n};\n","import { QRCodeModel } from './QRCodeModel';\nimport { QRErrorCorrectLevel } from './QRErrorCorrectLevel';\nimport { QRCodeLimitLength } from './QRCodeLimitLength';\nimport { getUTF8Length } from './utils';\n\ntype QRCodeOptions = {\n  ecl: 'L' | 'M' | 'Q' | 'H';\n  content: string;\n};\n\nexport class QRCode {\n  options: QRCodeOptions = {\n    ecl: 'M',\n    content: '',\n  };\n\n  private readonly qrcode!: QRCodeModel;\n\n  constructor(options: Partial<QRCodeOptions>) {\n    for (const i in options) {\n      this.options[i] = options[i];\n    }\n\n    if (this.options.content.length === 0) {\n      throw new Error(\"Expected 'content' to be non-empty!\");\n    }\n\n    const content = this.options.content;\n    const type = this.getTypeNumber(content, this.options.ecl);\n    const ecl = this.getErrorCorrectLevel(this.options.ecl);\n    this.qrcode = new QRCodeModel(type, ecl);\n    this.qrcode.addData(content);\n    this.qrcode.make();\n  }\n\n  private getErrorCorrectLevel(ecl) {\n    const result = QRErrorCorrectLevel[ecl];\n\n    if (result == undefined) {\n      throw new Error('Unknwon error correction level: ' + ecl);\n    }\n\n    return result;\n  }\n\n  private getTypeNumber(content, ecl) {\n    const length = getUTF8Length(content);\n\n    let type = 1;\n    let limit = 0;\n    let i = 0;\n    const len = QRCodeLimitLength.length;\n    for (; i <= len; i++) {\n      const table = QRCodeLimitLength[i];\n      if (!table) {\n        throw new Error('Content too long: expected ' + limit + ' but got ' + length);\n      }\n\n      switch (ecl) {\n        case 'L':\n          limit = table[0];\n          break;\n\n        case 'M':\n          limit = table[1];\n          break;\n\n        case 'Q':\n          limit = table[2];\n          break;\n\n        case 'H':\n          limit = table[3];\n          break;\n\n        default:\n          throw new Error('Unknwon error correction level: ' + ecl);\n      }\n\n      if (length <= limit) {\n        break;\n      }\n\n      type++;\n    }\n\n    if (type > QRCodeLimitLength.length) {\n      throw new Error('Content too long');\n    }\n\n    return type;\n  }\n\n  emptyCenter(emptySize: number, emptySizeHeight?: number) {\n    const { size } = this;\n\n    emptySizeHeight = emptySizeHeight || emptySize;\n\n    const halfSize = size / 2;\n    const halfEmptySize = emptySize / 2;\n    const halfEmptySizeHeight = emptySizeHeight / 2;\n\n    for (let y = 0; y < size; y++) {\n      for (let x = 0; x < size; x++) {\n        if (\n          y >= halfSize - halfEmptySizeHeight &&\n          y < halfSize + halfEmptySizeHeight &&\n          x >= halfSize - halfEmptySize &&\n          x < halfSize + halfEmptySize\n        ) {\n          this.matrix[y][x] = false;\n        }\n\n      }\n    }\n  }\n\n  get matrix() {\n    return this.qrcode.modules;\n  }\n\n  get size() {\n    return this.qrcode.moduleCount;\n  }\n}\n","import { getProp, round, neighborOffsets, contour } from './utils';\nimport { QRCode } from './QRCode';\n\ntype QRSvgOptions = {\n  size: number;\n  radiusFactor: number;\n  cornerBlockRadiusFactor?: number;\n  roundOuterCorners: boolean;\n  roundInnerCorners: boolean;\n  cornerBlocksAsCircles: boolean;\n  fill: string;\n  preContent?: string | ((QRSvg) => string);\n  postContent?: string | ((QRSvg) => string);\n};\n\ntype Pride = 1 | 0;\n\ntype Cell = {\n  pride: Pride;\n  x: number;\n  y: number;\n  blockId?: string;\n  isCornerBlock: boolean;\n};\n\ntype LineSegment = {\n  processed: boolean;\n  p1: { x: number; y: number };\n  p2: { x: number; y: number };\n  cell: Cell;\n  cr: number;\n};\n\ntype LineSegmentsWithCrops = LineSegment[] & { crops?: LineSegment[][] };\n\nconst findNeighbors = (matrix: Cell[][], cell: Cell, pride: Pride, expectCells: Cell[] = []) => {\n  expectCells.push(cell);\n\n  for (const offset of neighborOffsets) {\n    const neighborCoord = { x: cell.x + offset[0], y: cell.y + offset[1] };\n\n    if (!expectCells.find((i) => i.x === neighborCoord.x && i.y === neighborCoord.y)) {\n      const neighborCell = getProp(matrix, [neighborCoord.y, neighborCoord.x]);\n\n      if (neighborCell && neighborCell.pride === pride) {\n        const pride = neighborCell.pride;\n        findNeighbors(matrix, neighborCell, pride, expectCells);\n      }\n    }\n  }\n};\n\nexport class QRSvg {\n  private options: QRSvgOptions = {\n    size: 0,\n    radiusFactor: 0.75,\n    roundOuterCorners: true,\n    roundInnerCorners: true,\n    cornerBlocksAsCircles: false,\n    fill: 'currentColor',\n  };\n\n  private matrix!: Cell[][];\n\n  paths: string[] = [];\n\n  private readonly matrixSize!: number;\n\n  private lines: Record<string, LineSegmentsWithCrops> = {};\n\n  private lastUniqId = 0;\n\n  readonly pointSize!: number;\n\n  constructor(qrCode: QRCode, options: Partial<QRSvgOptions>) {\n    for (const i in options) {\n      this.options[i] = options[i];\n    }\n\n    if (this.options.cornerBlockRadiusFactor === undefined) {\n      this.options.cornerBlockRadiusFactor = this.options.radiusFactor;\n    }\n\n    if (!(this.options.size > 0)) {\n      throw new Error(\"Expected 'size' value to be higher than zero!\");\n    }\n\n    this.matrixSize = qrCode.size;\n    this.pointSize = this.options.size / this.matrixSize;\n\n    this.matrix = (() => {\n      const result: Cell[][] = [];\n      qrCode.matrix.forEach((row, rowIdx) => {\n        result[rowIdx] = [];\n        row.forEach((val, idx) => {\n          result[rowIdx][idx] = {\n            pride: val ? 1 : 0,\n            x: idx,\n            y: rowIdx,\n            blockId: undefined,\n            isCornerBlock: false,\n          } as Cell;\n        });\n      });\n      return result;\n    })();\n\n    this.detectBlocks();\n    this.detectLines();\n    this.generatePaths();\n  }\n\n  private detectBlocks() {\n    const { matrixSize, matrix } = this;\n\n    for (let y = 0; y < matrixSize; y++) {\n      for (let x = 0; x < matrixSize; x++) {\n        const currCell = matrix[y][x];\n        if (currCell.blockId === undefined && currCell.pride === 1) {\n          const cells: Cell[] = [];\n          findNeighbors(matrix, currCell, 1, cells);\n          const blockId = this.getUniqId();\n          cells.forEach((cell) => {\n            const { x, y } = cell;\n            cell.blockId = blockId;\n\n            if ((x < 8 && y < 8) || (x > this.matrixSize - 8 && y < 8) || (x < 8 && y > this.matrixSize - 8)) {\n              cell.isCornerBlock = true;\n            }\n          });\n        }\n      }\n    }\n  }\n\n  private detectLines() {\n    const { lines, matrixSize, matrix } = this;\n\n    const pathRadius = (this.pointSize / 2) * Math.min(this.options.radiusFactor, 10);\n    const cornerBlockPathRadius = (this.pointSize / 2) * Math.min(this.options.cornerBlockRadiusFactor as number, 10);\n\n    for (let y = 0; y < matrixSize; y++) {\n      for (let x = 0; x < matrixSize; x++) {\n        const cell = matrix[y][x];\n        if (cell.blockId === undefined) {\n          continue;\n        }\n\n        if (cell.isCornerBlock && this.options.cornerBlocksAsCircles) {\n          continue;\n        }\n\n        neighborOffsets.forEach((offset, idx) => {\n          const neighborCell = getProp(matrix, [y + offset[0], x + offset[1]]);\n          if (!neighborCell || neighborCell.blockId !== cell.blockId) {\n            if (cell.blockId) {\n              lines[cell.blockId] = lines[cell.blockId] || [];\n              lines[cell.blockId].push({\n                processed: false,\n                p1: { y: y + contour[idx][0][0], x: x + contour[idx][0][1] },\n                p2: { y: y + contour[idx][1][0], x: x + contour[idx][1][1] },\n                cell,\n                cr: cell.isCornerBlock ? cornerBlockPathRadius : pathRadius,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    Object.keys(lines).forEach((key) => {\n      const line = lines[key];\n\n      const proc = (py, px, result, oCell) => {\n        const nextSegs = line\n          .filter((seg) => {\n            if (!seg.processed) {\n              if ((seg.p1.y === py && seg.p1.x === px) || (seg.p2.y === py && seg.p2.x === px)) {\n                return true;\n              }\n            }\n            return false;\n          })\n          .sort((a, b) => {\n            if (a.cell === oCell) {\n              return -1;\n            }\n            return 1;\n          });\n\n        const nextSeg = nextSegs[0];\n\n        if (nextSeg) {\n          nextSeg.processed = true;\n          let resultSeg;\n          if (nextSeg.p1.y === py && nextSeg.p1.x === px) {\n            resultSeg = { p1: nextSeg.p1, p2: nextSeg.p2, cr: nextSeg.cr };\n          } else if (nextSeg.p2.y === py && nextSeg.p2.x === px) {\n            resultSeg = { p1: nextSeg.p2, p2: nextSeg.p1, cr: nextSeg.cr };\n          }\n          result.push(resultSeg);\n          proc(resultSeg.p2.y, resultSeg.p2.x, result, nextSeg.cell);\n        }\n      };\n      line[0].processed = true;\n      const result: LineSegmentsWithCrops = [line[0]];\n      proc(line[0].p2.y, line[0].p2.x, result, line[0].cell);\n      lines[key] = result;\n      lines[key].crops = [];\n\n      let checkCrops = true;\n      while (checkCrops) {\n        const notProcessedSeg = line.find((i) => !i.processed);\n        if (notProcessedSeg) {\n          notProcessedSeg.processed = true;\n          const cropResult = [notProcessedSeg];\n          proc(notProcessedSeg.p2.y, notProcessedSeg.p2.x, cropResult, notProcessedSeg.cell);\n          cropResult.reverse();\n          cropResult.map((seg) => {\n            const op2 = seg.p2;\n            seg.p2 = seg.p1;\n            seg.p1 = op2;\n            return seg;\n          });\n          lines[key]?.crops?.push(cropResult);\n        } else {\n          checkCrops = false;\n        }\n      }\n    });\n  }\n\n  private getDir(seg) {\n    if (seg.p1.x === seg.p2.x) {\n      if (seg.p1.y > seg.p2.y) {\n        return 'sn';\n      }\n      return 'ns';\n    }\n    if (seg.p1.y === seg.p2.y) {\n      if (seg.p1.x > seg.p2.x) {\n        return 'ew';\n      }\n      return 'we';\n    }\n  }\n\n  private getSubPath(seg, prevSeg, roundOuterCorners, roundInnerCorners) {\n    const { pointSize } = this;\n\n    let {\n      p1: { x, y },\n      cr,\n    } = seg;\n\n    x = x * pointSize;\n    y = y * pointSize;\n\n    const xmcr = round(x - cr);\n    const xpcr = round(x + cr);\n\n    const ymcr = round(y - cr);\n    const ypcr = round(y + cr);\n\n    x = round(x);\n    y = round(y);\n\n    const segDir = this.getDir(seg);\n    const prevSegDir = this.getDir(prevSeg);\n\n    let path = '';\n    if (cr && roundOuterCorners && prevSegDir === 'we' && segDir === 'ns') {\n      path += `L${xmcr} ${y} `;\n      path += `Q${x} ${y} ${x} ${ypcr}`;\n    } else if (cr && roundOuterCorners && prevSegDir === 'ns' && segDir === 'ew') {\n      path += `L${x} ${ymcr} `;\n      path += `Q${x} ${y} ${xmcr} ${y}`;\n    } else if (cr && roundOuterCorners && prevSegDir === 'ew' && segDir === 'sn') {\n      path += `L${xpcr} ${y} `;\n      path += `Q${x} ${y} ${x} ${ymcr}`;\n    } else if (cr && roundOuterCorners && prevSegDir === 'sn' && segDir === 'we') {\n      path += `L${x} ${ypcr} `;\n      path += `Q${x} ${y} ${xpcr} ${y}`;\n    } else if (cr && roundInnerCorners && prevSegDir === 'sn' && segDir === 'ew') {\n      path += `L${x} ${ypcr} `;\n      path += `Q${x} ${y} ${xmcr} ${y}`;\n    } else if (cr && roundInnerCorners && prevSegDir === 'ew' && segDir === 'ns') {\n      path += `L${xpcr} ${y} `;\n      path += `Q${x} ${y} ${x} ${ypcr}`;\n    } else if (cr && roundInnerCorners && prevSegDir === 'ns' && segDir === 'we') {\n      path += `L${x} ${ymcr} `;\n      path += `Q${x} ${y} ${xpcr} ${y}`;\n    } else if (cr && roundInnerCorners && prevSegDir === 'we' && segDir === 'sn') {\n      path += `L${xmcr} ${y} `;\n      path += `Q${x} ${y} ${x} ${ymcr}`;\n    } else {\n      path += `L${x} ${y} `;\n    }\n    return path;\n  }\n\n  private getUniqId() {\n    return String(this.lastUniqId++);\n  }\n\n  private generatePaths() {\n    const {\n      pointSize,\n      options: { roundOuterCorners, roundInnerCorners, cornerBlocksAsCircles },\n    } = this;\n\n    const { lines } = this;\n    const paths: string[] = [];\n\n    Object.keys(lines).forEach((key) => {\n      let path = '';\n      for (const [lineIdx, line] of [lines[key], ...(lines[key].crops as LineSegment[][])].entries()) {\n        for (const [segIdx, seg] of line.entries()) {\n          let {\n            p1: { x, y },\n            cr,\n          } = seg;\n\n          x = x * pointSize;\n          y = y * pointSize;\n\n          const xpcr = round(x + cr);\n          const ypcr = round(y + cr);\n\n          x = round(x);\n          y = round(y);\n\n          const prevSeg = line[segIdx - 1] || line[line.length - 1];\n          const nextSeg = line[segIdx + 1] || line[0];\n\n          const segDir = this.getDir(seg);\n          const prevSegDir = this.getDir(prevSeg);\n\n          if (segIdx === 0) {\n            if (roundOuterCorners) {\n              if (lineIdx === 0) {\n                path += `M${xpcr} ${y} `;\n              } else {\n                path += `M${x} ${ypcr} `;\n              }\n            } else {\n              path += `M${x} ${y} `;\n            }\n          } else if (segIdx === line.length - 1) {\n            path += this.getSubPath(seg, prevSeg, roundOuterCorners, roundInnerCorners);\n            path += this.getSubPath(nextSeg, seg, roundOuterCorners, roundInnerCorners);\n            path += 'Z';\n          } else if (prevSegDir !== segDir) {\n            path += this.getSubPath(seg, prevSeg, roundOuterCorners, roundInnerCorners);\n          }\n        }\n      }\n      paths.push(`<path d=\"${path}\"/>`);\n    });\n\n    if (cornerBlocksAsCircles) {\n      const offsetSize = this.pointSize * this.matrixSize - this.pointSize * 7;\n      [\n        [0, 0],\n        [offsetSize, 0],\n        [0, offsetSize],\n      ].forEach(([ox, oy]) => {\n        const centerX = round((this.pointSize * 7) / 2 + ox);\n        const centerY = round((this.pointSize * 7) / 2 + oy);\n\n        let outerRadius = round((this.pointSize * 7) / 2);\n        const innerRadius = round((this.pointSize * 7) / 2 - this.pointSize);\n\n        // Big circle\n        paths.push(`<path d=\"\\\nM ${centerX} ${centerY - outerRadius} \\\nA ${outerRadius} ${outerRadius} 0 1 0 ${centerX} ${round(centerY + outerRadius)} \\\nA ${outerRadius} ${outerRadius} 0 1 0 ${centerX} ${round(centerY - outerRadius)} \\\nZ \\\nM ${centerX} ${centerY - innerRadius} \\\nA ${innerRadius} ${innerRadius} 0 1 1 ${centerX} ${round(centerY + innerRadius)} \\\nA ${innerRadius} ${innerRadius} 0 1 1 ${centerX} ${round(centerY - innerRadius)} \\\nZ\" />`);\n\n        // Small circle\n        outerRadius = round((this.pointSize * 7) / 2 - this.pointSize * 2);\n        paths.push(`<path d=\"\\\nM ${centerX} ${centerY - outerRadius} \\\nA ${outerRadius} ${outerRadius} 0 1 0 ${centerX} ${round(centerY + outerRadius)} \\\nA ${outerRadius} ${outerRadius} 0 1 0 ${centerX} ${round(centerY - outerRadius)} \\\nZ\" />`);\n      });\n    }\n\n    this.paths = paths;\n  }\n\n  private svgAdditionalContent(additionalContent): string {\n    if (typeof additionalContent === 'function') {\n      return additionalContent(this);\n    }\n\n    if (typeof additionalContent === 'string') {\n      return additionalContent;\n    }\n\n    return additionalContent || '';\n  }\n\n  get svg() {\n    const { size, fill } = this.options;\n\n    return `\\\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${size} ${size}\" width=\"${size}\" height=\"${size}\" fill=\"${fill}\">\n${this.svgAdditionalContent(this.options.preContent)}\n${this.paths.join('\\n')}\n${this.svgAdditionalContent(this.options.postContent)}\n</svg>`;\n  }\n}\n"],"names":["QR8bitByte","data","mode","parsedData","this","i","l","length","code","charCodeAt","push","Array","prototype","concat","apply","unshift","getLength","write","buffer","put","QRErrorCorrectLevel","L","M","Q","H","QRRSBlock","totalCount","dataCount","getRSBlocks","typeNumber","errorCorrectLevel","rsBlock","getRsBlockTable","undefined","Error","list","count","j","RS_BLOCK_TABLE","QRBitBuffer","get","index","bufIndex","Math","floor","num","putBit","getLengthInBits","bit","EXP_TABLE","LOG_TABLE","glog","n","gexp","QRPolynomial","shift","offset","multiply","e","QRMath","mod","ratio","PATTERN_POSITION_TABLE","G15","G18","getBCHDigit","digit","getMask","maskPattern","getErrorCorrectPolynomial","errorCorrectLength","a","type","getLostPoint","qrCode","moduleCount","getModuleCount","lostPoint","row","col","sameCount","dark","isDark","r","c","darkCount","abs","QRCodeModel","modules","dataCache","dataList","addData","newData","make","makeImpl","getBestMaskPattern","test","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","minLostPoint","pattern","QRUtil","createMovieClip","target_mc","instance_name","depth","qr_mc","createEmptyMovieClip","y","x","beginFill","moveTo","lineTo","endFill","pos","bits","d","inc","bitIndex","byteIndex","rsBlocks","totalDataCount","createBytes","maxDcCount","maxEcCount","dcdata","ecdata","dcCount","ecCount","max","rsPoly","modPoly","modIndex","totalCodeCount","QRCodeLimitLength","getProp","object","keys","defaultVal","isArray","split","slice","round","val","precision","neighborOffsets","contour","QRCode","options","ecl","content","qrcode","getTypeNumber","getErrorCorrectLevel","result","encodeURI","toString","replace","getUTF8Length","limit","len","table","emptyCenter","emptySize","emptySizeHeight","size","halfSize","halfEmptySize","halfEmptySizeHeight","matrix","findNeighbors","cell","pride","expectCells","neighborCoord","find","neighborCell","QRSvg","radiusFactor","roundOuterCorners","roundInnerCorners","cornerBlocksAsCircles","fill","paths","matrixSize","lines","lastUniqId","pointSize","cornerBlockRadiusFactor","forEach","rowIdx","idx","blockId","isCornerBlock","detectBlocks","detectLines","generatePaths","currCell","cells","_this","getUniqId","pathRadius","min","cornerBlockPathRadius","_this2","processed","p1","p2","cr","Object","key","line","proc","py","px","oCell","resultSeg","nextSeg","filter","seg","sort","b","crops","checkCrops","notProcessedSeg","cropResult","reverse","map","op2","getDir","getSubPath","prevSeg","xmcr","xpcr","ymcr","ypcr","segDir","prevSegDir","path","String","entries","lineIdx","segIdx","_this3","offsetSize","oy","centerX","centerY","outerRadius","innerRadius","svgAdditionalContent","additionalContent","preContent","join","postContent"],"mappings":"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I,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KACvB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,KACV,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,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"}